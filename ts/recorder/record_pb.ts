// @generated by protoc-gen-es v1.0.0 with parameter "target=ts,import_extension=none"
// @generated from file recorder/record.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * 動作類型
 *
 * @generated from enum recorder.StepActionType
 */
export enum StepActionType {
  /**
   * 未指定
   *
   * @generated from enum value: STEP_ACTION_TYPE_UNSPECIFIED = 0;
   */
  STEP_ACTION_TYPE_UNSPECIFIED = 0,

  /**
   * 發牌
   *
   * @generated from enum value: DEAL = 1;
   */
  DEAL = 1,

  /**
   * 移除場上
   *
   * @generated from enum value: REMOVE = 2;
   */
  REMOVE = 2,

  /**
   * 移轉
   *
   * @generated from enum value: TRANSFER = 3;
   */
  TRANSFER = 3,

  /**
   * 狀態改變
   *
   * @generated from enum value: STATUS = 4;
   */
  STATUS = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(StepActionType)
proto3.util.setEnumType(StepActionType, "recorder.StepActionType", [
  { no: 0, name: "STEP_ACTION_TYPE_UNSPECIFIED" },
  { no: 1, name: "DEAL" },
  { no: 2, name: "REMOVE" },
  { no: 3, name: "TRANSFER" },
  { no: 4, name: "STATUS" },
]);

/**
 * 卡牌，代表在此局中使用的各類物品
 *
 * @generated from message recorder.Card
 */
export class Card extends Message<Card> {
  /**
   * @generated from field: int64 type = 1;
   */
  type = protoInt64.zero;

  /**
   * 卡牌內容代碼：CardTypeCode。
   *
   * @generated from field: int64 code = 2;
   */
  code = protoInt64.zero;

  /**
   * 卡牌ID：牌唯一碼，同ID表示同一張實體牌。不使用此欄位填0。
   *
   * @generated from field: int64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * 狀態：翻開、關起、橫放...
   *
   * @generated from field: bool status = 4;
   */
  status = false;

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(a: Card | PlainMessage<Card> | undefined, b: Card | PlainMessage<Card> | undefined): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

/**
 * 卡牌列表
 *
 * @generated from message recorder.CardList
 */
export class CardList extends Message<CardList> {
  /**
   * @generated from field: repeated recorder.Card list = 1;
   */
  list: Card[] = [];

  constructor(data?: PartialMessage<CardList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.CardList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Card, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CardList {
    return new CardList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CardList {
    return new CardList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CardList {
    return new CardList().fromJsonString(jsonString, options);
  }

  static equals(a: CardList | PlainMessage<CardList> | undefined, b: CardList | PlainMessage<CardList> | undefined): boolean {
    return proto3.util.equals(CardList, a, b);
  }
}

/**
 * 執行動作：對某些資源進行增、刪、移轉
 *
 * @generated from message recorder.StepAction
 */
export class StepAction extends Message<StepAction> {
  /**
   * 動作代碼：StepActionCode
   *
   * @generated from field: int64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * 原資源擁有座位。
   *
   * @generated from field: int64 source_seat = 3;
   */
  sourceSeat = protoInt64.zero;

  /**
   * 資源轉移目標座位。
   *
   * @generated from field: repeated int64 target_seat = 4;
   */
  targetSeat: bigint[] = [];

  /**
   * 目標卡牌資源
   * key: ResourceTypeCode, value: 卡牌陣列
   *
   * @generated from field: map<int64, recorder.CardList> cards = 6;
   */
  cards: { [key: string]: CardList } = {};

  /**
   * 目標分數資源
   * key: ResourceTypeCode, value: 分數值。
   *
   * @generated from field: map<int64, int64> scores = 7;
   */
  scores: { [key: string]: bigint } = {};

  /**
   * 動作類型
   *
   * @generated from field: recorder.StepActionType type = 8;
   */
  type = StepActionType.STEP_ACTION_TYPE_UNSPECIFIED;

  /**
   * （可選）附加資料
   *
   * @generated from field: google.protobuf.Any data = 9;
   */
  data?: Any;

  /**
   * 分配秒數
   *
   * @generated from field: int64 duration = 10;
   */
  duration = protoInt64.zero;

  constructor(data?: PartialMessage<StepAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.StepAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "source_seat", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "target_seat", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 6, name: "cards", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: CardList} },
    { no: 7, name: "scores", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 8, name: "type", kind: "enum", T: proto3.getEnumType(StepActionType) },
    { no: 9, name: "data", kind: "message", T: Any },
    { no: 10, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StepAction {
    return new StepAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StepAction {
    return new StepAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StepAction {
    return new StepAction().fromJsonString(jsonString, options);
  }

  static equals(a: StepAction | PlainMessage<StepAction> | undefined, b: StepAction | PlainMessage<StepAction> | undefined): boolean {
    return proto3.util.equals(StepAction, a, b);
  }
}

/**
 * 遊戲步驟
 *
 * @generated from message recorder.Step
 */
export class Step extends Message<Step> {
  /**
   * 步驟代碼：StepCode
   *
   * @generated from field: int64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * 玩家、執行者：SeatCode
   *
   * @generated from field: int64 seat = 3;
   */
  seat = protoInt64.zero;

  /**
   * 時間戳
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp;

  /**
   * 執行動作
   *
   * @generated from field: repeated recorder.StepAction actions = 6;
   */
  actions: StepAction[] = [];

  /**
   * 是否是修正錯誤
   *
   * @generated from field: bool modify = 8;
   */
  modify = false;

  constructor(data?: PartialMessage<Step>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.Step";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "seat", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
    { no: 6, name: "actions", kind: "message", T: StepAction, repeated: true },
    { no: 8, name: "modify", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Step {
    return new Step().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJsonString(jsonString, options);
  }

  static equals(a: Step | PlainMessage<Step> | undefined, b: Step | PlainMessage<Step> | undefined): boolean {
    return proto3.util.equals(Step, a, b);
  }
}

/**
 * 座位
 *
 * @generated from message recorder.Seats
 */
export class Seats extends Message<Seats> {
  /**
   * 座位功能代碼：SeatCode
   *
   * @generated from field: int64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * 各類手牌
   * key: ResourceTypeCode, value: 卡牌陣列
   *
   * @generated from field: map<int64, recorder.CardList> cards = 6;
   */
  cards: { [key: string]: CardList } = {};

  /**
   * 各類分數
   * key: ResourceTypeCode, value: 分數值。
   *
   * @generated from field: map<int64, int64> scores = 7;
   */
  scores: { [key: string]: bigint } = {};

  constructor(data?: PartialMessage<Seats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.Seats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "cards", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: CardList} },
    { no: 7, name: "scores", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Seats {
    return new Seats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Seats {
    return new Seats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Seats {
    return new Seats().fromJsonString(jsonString, options);
  }

  static equals(a: Seats | PlainMessage<Seats> | undefined, b: Seats | PlainMessage<Seats> | undefined): boolean {
    return proto3.util.equals(Seats, a, b);
  }
}

/**
 * 記錄各座位狀態
 *
 * @generated from message recorder.Result
 */
export class Result extends Message<Result> {
  /**
   * 判讀類型代碼：ResultRecordTypeCode
   *
   * @generated from field: int64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * 紀錄者座位代碼
   *
   * @generated from field: string by_seat = 3;
   */
  bySeat = "";

  /**
   * 時間戳
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp;

  /**
   * 座位組
   * key: SeatCode, value: Seat
   *
   * @generated from field: map<int64, recorder.Seats> seats = 6;
   */
  seats: { [key: string]: Seats } = {};

  constructor(data?: PartialMessage<Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "by_seat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
    { no: 6, name: "seats", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: Seats} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Result {
    return new Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJsonString(jsonString, options);
  }

  static equals(a: Result | PlainMessage<Result> | undefined, b: Result | PlainMessage<Result> | undefined): boolean {
    return proto3.util.equals(Result, a, b);
  }
}

/**
 * 紀錄
 *
 * @generated from message recorder.RoundRecord
 */
export class RoundRecord extends Message<RoundRecord> {
  /**
   * 紀錄ID
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * 遊戲代碼
   *
   * @generated from field: string game_code = 2;
   */
  gameCode = "";

  /**
   * 桌代碼
   *
   * @generated from field: string table_code = 3;
   */
  tableCode = "";

  /**
   * 局代碼
   *
   * @generated from field: string round_code = 4;
   */
  roundCode = "";

  /**
   * 使用洗牌ID
   *
   * @generated from field: string shuffle_code = 5;
   */
  shuffleCode = "";

  /**
   * 使用此洗牌第幾局，從1開始計算
   *
   * @generated from field: int64 shuffle_round = 6;
   */
  shuffleRound = protoInt64.zero;

  /**
   * 遊戲版本
   *
   * @generated from field: string game_version = 7;
   */
  gameVersion = "";

  /**
   * 座位組
   * key: SeatCode, value: Seat
   *
   * @generated from field: map<int64, recorder.Seats> seats = 8;
   */
  seats: { [key: string]: Seats } = {};

  /**
   * 玩家入座
   * key: SeatCode, value: 玩家code。
   *
   * @generated from field: map<int64, string> players = 9;
   */
  players: { [key: string]: string } = {};

  /**
   * 歷程
   *
   * @generated from field: repeated recorder.Step process = 10;
   */
  process: Step[] = [];

  /**
   * 判讀
   *
   * @generated from field: repeated recorder.Result results = 11;
   */
  results: Result[] = [];

  /**
   * 取消
   *
   * @generated from field: bool cancel = 12;
   */
  cancel = false;

  /**
   * 取消代碼：CancelReasonCode
   *
   * @generated from field: int64 cancel_code = 13;
   */
  cancelCode = protoInt64.zero;

  constructor(data?: PartialMessage<RoundRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "recorder.RoundRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shuffle_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "seats", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: Seats} },
    { no: 9, name: "players", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "process", kind: "message", T: Step, repeated: true },
    { no: 11, name: "results", kind: "message", T: Result, repeated: true },
    { no: 12, name: "cancel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "cancel_code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoundRecord {
    return new RoundRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoundRecord {
    return new RoundRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoundRecord {
    return new RoundRecord().fromJsonString(jsonString, options);
  }

  static equals(a: RoundRecord | PlainMessage<RoundRecord> | undefined, b: RoundRecord | PlainMessage<RoundRecord> | undefined): boolean {
    return proto3.util.equals(RoundRecord, a, b);
  }
}

