// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: recorder/provider.proto

package recorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecorderReadService_FetchShuffleRecord_FullMethodName = "/recorder.RecorderReadService/FetchShuffleRecord"
	RecorderReadService_FetchRoundRecord_FullMethodName   = "/recorder.RecorderReadService/FetchRoundRecord"
)

// RecorderReadServiceClient is the client API for RecorderReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderReadServiceClient interface {
	// 讀洗牌紀錄
	FetchShuffleRecord(ctx context.Context, in *FetchShuffleRecordRequest, opts ...grpc.CallOption) (*FetchShuffleRecordResponse, error)
	// 讀遊戲局號紀錄
	FetchRoundRecord(ctx context.Context, in *FetchRoundRecordRequest, opts ...grpc.CallOption) (*FetchRoundRecordResponse, error)
}

type recorderReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderReadServiceClient(cc grpc.ClientConnInterface) RecorderReadServiceClient {
	return &recorderReadServiceClient{cc}
}

func (c *recorderReadServiceClient) FetchShuffleRecord(ctx context.Context, in *FetchShuffleRecordRequest, opts ...grpc.CallOption) (*FetchShuffleRecordResponse, error) {
	out := new(FetchShuffleRecordResponse)
	err := c.cc.Invoke(ctx, RecorderReadService_FetchShuffleRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderReadServiceClient) FetchRoundRecord(ctx context.Context, in *FetchRoundRecordRequest, opts ...grpc.CallOption) (*FetchRoundRecordResponse, error) {
	out := new(FetchRoundRecordResponse)
	err := c.cc.Invoke(ctx, RecorderReadService_FetchRoundRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderReadServiceServer is the server API for RecorderReadService service.
// All implementations must embed UnimplementedRecorderReadServiceServer
// for forward compatibility
type RecorderReadServiceServer interface {
	// 讀洗牌紀錄
	FetchShuffleRecord(context.Context, *FetchShuffleRecordRequest) (*FetchShuffleRecordResponse, error)
	// 讀遊戲局號紀錄
	FetchRoundRecord(context.Context, *FetchRoundRecordRequest) (*FetchRoundRecordResponse, error)
	mustEmbedUnimplementedRecorderReadServiceServer()
}

// UnimplementedRecorderReadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderReadServiceServer struct {
}

func (UnimplementedRecorderReadServiceServer) FetchShuffleRecord(context.Context, *FetchShuffleRecordRequest) (*FetchShuffleRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShuffleRecord not implemented")
}
func (UnimplementedRecorderReadServiceServer) FetchRoundRecord(context.Context, *FetchRoundRecordRequest) (*FetchRoundRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRoundRecord not implemented")
}
func (UnimplementedRecorderReadServiceServer) mustEmbedUnimplementedRecorderReadServiceServer() {}

// UnsafeRecorderReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecorderReadServiceServer will
// result in compilation errors.
type UnsafeRecorderReadServiceServer interface {
	mustEmbedUnimplementedRecorderReadServiceServer()
}

func RegisterRecorderReadServiceServer(s grpc.ServiceRegistrar, srv RecorderReadServiceServer) {
	s.RegisterService(&RecorderReadService_ServiceDesc, srv)
}

func _RecorderReadService_FetchShuffleRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchShuffleRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderReadServiceServer).FetchShuffleRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderReadService_FetchShuffleRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderReadServiceServer).FetchShuffleRecord(ctx, req.(*FetchShuffleRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecorderReadService_FetchRoundRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRoundRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderReadServiceServer).FetchRoundRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecorderReadService_FetchRoundRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderReadServiceServer).FetchRoundRecord(ctx, req.(*FetchRoundRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecorderReadService_ServiceDesc is the grpc.ServiceDesc for RecorderReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecorderReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recorder.RecorderReadService",
	HandlerType: (*RecorderReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchShuffleRecord",
			Handler:    _RecorderReadService_FetchShuffleRecord_Handler,
		},
		{
			MethodName: "FetchRoundRecord",
			Handler:    _RecorderReadService_FetchRoundRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder/provider.proto",
}

const (
	ProviderService_FetchTableProvideList_FullMethodName = "/recorder.ProviderService/FetchTableProvideList"
	ProviderService_FetchCurrentTable_FullMethodName     = "/recorder.ProviderService/FetchCurrentTable"
)

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	// 取得即時遊戲列表
	FetchTableProvideList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FetchTableProvideListResponse, error)
	// 讀即時遊戲桌資訊
	FetchCurrentTable(ctx context.Context, in *FetchCurrentTableRequest, opts ...grpc.CallOption) (*FetchCurrentTableResponse, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) FetchTableProvideList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FetchTableProvideListResponse, error) {
	out := new(FetchTableProvideListResponse)
	err := c.cc.Invoke(ctx, ProviderService_FetchTableProvideList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) FetchCurrentTable(ctx context.Context, in *FetchCurrentTableRequest, opts ...grpc.CallOption) (*FetchCurrentTableResponse, error) {
	out := new(FetchCurrentTableResponse)
	err := c.cc.Invoke(ctx, ProviderService_FetchCurrentTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations must embed UnimplementedProviderServiceServer
// for forward compatibility
type ProviderServiceServer interface {
	// 取得即時遊戲列表
	FetchTableProvideList(context.Context, *emptypb.Empty) (*FetchTableProvideListResponse, error)
	// 讀即時遊戲桌資訊
	FetchCurrentTable(context.Context, *FetchCurrentTableRequest) (*FetchCurrentTableResponse, error)
	mustEmbedUnimplementedProviderServiceServer()
}

// UnimplementedProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServiceServer struct {
}

func (UnimplementedProviderServiceServer) FetchTableProvideList(context.Context, *emptypb.Empty) (*FetchTableProvideListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTableProvideList not implemented")
}
func (UnimplementedProviderServiceServer) FetchCurrentTable(context.Context, *FetchCurrentTableRequest) (*FetchCurrentTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCurrentTable not implemented")
}
func (UnimplementedProviderServiceServer) mustEmbedUnimplementedProviderServiceServer() {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_FetchTableProvideList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).FetchTableProvideList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_FetchTableProvideList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).FetchTableProvideList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_FetchCurrentTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCurrentTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).FetchCurrentTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_FetchCurrentTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).FetchCurrentTable(ctx, req.(*FetchCurrentTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recorder.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTableProvideList",
			Handler:    _ProviderService_FetchTableProvideList_Handler,
		},
		{
			MethodName: "FetchCurrentTable",
			Handler:    _ProviderService_FetchCurrentTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder/provider.proto",
}
