// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file games/threecards/record.proto (package games.threecards, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from enum games.threecards.ResourceType
 */
export var ResourceType;
(function (ResourceType) {
    /**
     * 未指定
     *
     * @generated from enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
     */
    ResourceType[ResourceType["RESOURCE_TYPE_UNSPECIFIED"] = 0] = "RESOURCE_TYPE_UNSPECIFIED";
    /**
     * 牌靴
     *
     * @generated from enum value: SHOE = 1;
     */
    ResourceType[ResourceType["SHOE"] = 1] = "SHOE";
    /**
     * 例牌
     *
     * @generated from enum value: NORMAL = 2;
     */
    ResourceType[ResourceType["NORMAL"] = 2] = "NORMAL";
})(ResourceType || (ResourceType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResourceType)
proto3.util.setEnumType(ResourceType, "games.threecards.ResourceType", [
    { no: 0, name: "RESOURCE_TYPE_UNSPECIFIED" },
    { no: 1, name: "SHOE" },
    { no: 2, name: "NORMAL" },
]);
/**
 * 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
 *
 * @generated from enum games.threecards.Step
 */
export var Step;
(function (Step) {
    /**
     * 未指定
     *
     * @generated from enum value: STEP_UNSPECIFIED = 0;
     */
    Step[Step["STEP_UNSPECIFIED"] = 0] = "STEP_UNSPECIFIED";
    /**
     * 本局開始
     *
     * @generated from enum value: ROUND_START = 1;
     */
    Step[Step["ROUND_START"] = 1] = "ROUND_START";
    /**
     * 本局完成
     *
     * @generated from enum value: ROUND_FINISHED = 2;
     */
    Step[Step["ROUND_FINISHED"] = 2] = "ROUND_FINISHED";
    /**
     * 本局取消
     *
     * @generated from enum value: ROUND_CANCELED = 3;
     */
    Step[Step["ROUND_CANCELED"] = 3] = "ROUND_CANCELED";
    /**
     * 派發莊家例牌1
     *
     * @generated from enum value: DEAL_BANKER_1 = 4;
     */
    Step[Step["DEAL_BANKER_1"] = 4] = "DEAL_BANKER_1";
    /**
     * 派發閒家例牌1
     *
     * @generated from enum value: DEAL_PLAYER_1 = 5;
     */
    Step[Step["DEAL_PLAYER_1"] = 5] = "DEAL_PLAYER_1";
    /**
     * 派發莊家例牌2
     *
     * @generated from enum value: DEAL_BANKER_2 = 6;
     */
    Step[Step["DEAL_BANKER_2"] = 6] = "DEAL_BANKER_2";
    /**
     * 派發閒家例牌2
     *
     * @generated from enum value: DEAL_PLAYER_2 = 7;
     */
    Step[Step["DEAL_PLAYER_2"] = 7] = "DEAL_PLAYER_2";
    /**
     * 派發莊家例牌3
     *
     * @generated from enum value: DEAL_BANKER_3 = 8;
     */
    Step[Step["DEAL_BANKER_3"] = 8] = "DEAL_BANKER_3";
    /**
     * 派發閒家例牌3
     *
     * @generated from enum value: DEAL_PLAYER_3 = 9;
     */
    Step[Step["DEAL_PLAYER_3"] = 9] = "DEAL_PLAYER_3";
    /**
     * 開放下注
     *
     * @generated from enum value: OPEN_FOR_BETTING = 10;
     */
    Step[Step["OPEN_FOR_BETTING"] = 10] = "OPEN_FOR_BETTING";
    /**
     * 停止下注
     *
     * @generated from enum value: CLOSE_THE_BETTING = 11;
     */
    Step[Step["CLOSE_THE_BETTING"] = 11] = "CLOSE_THE_BETTING";
    /**
     * 開例牌
     *
     * @generated from enum value: SHOW_NORMAL = 12;
     */
    Step[Step["SHOW_NORMAL"] = 12] = "SHOW_NORMAL";
    /**
     * PITBOSS 修改派發例牌
     *
     * @generated from enum value: PITBOSS_MODIFY_NORMAL = 24;
     */
    Step[Step["PITBOSS_MODIFY_NORMAL"] = 24] = "PITBOSS_MODIFY_NORMAL";
})(Step || (Step = {}));
// Retrieve enum metadata with: proto3.getEnumType(Step)
proto3.util.setEnumType(Step, "games.threecards.Step", [
    { no: 0, name: "STEP_UNSPECIFIED" },
    { no: 1, name: "ROUND_START" },
    { no: 2, name: "ROUND_FINISHED" },
    { no: 3, name: "ROUND_CANCELED" },
    { no: 4, name: "DEAL_BANKER_1" },
    { no: 5, name: "DEAL_PLAYER_1" },
    { no: 6, name: "DEAL_BANKER_2" },
    { no: 7, name: "DEAL_PLAYER_2" },
    { no: 8, name: "DEAL_BANKER_3" },
    { no: 9, name: "DEAL_PLAYER_3" },
    { no: 10, name: "OPEN_FOR_BETTING" },
    { no: 11, name: "CLOSE_THE_BETTING" },
    { no: 12, name: "SHOW_NORMAL" },
    { no: 24, name: "PITBOSS_MODIFY_NORMAL" },
]);
/**
 * 座位功能代碼
 *
 * @generated from enum games.threecards.Seat
 */
export var Seat;
(function (Seat) {
    /**
     * 未指定
     *
     * @generated from enum value: SEAT_UNSPECIFIED = 0;
     */
    Seat[Seat["SEAT_UNSPECIFIED"] = 0] = "SEAT_UNSPECIFIED";
    /**
     * Dealer
     *
     * @generated from enum value: DEALER = 1;
     */
    Seat[Seat["DEALER"] = 1] = "DEALER";
    /**
     * 莊家
     *
     * @generated from enum value: BANKER = 2;
     */
    Seat[Seat["BANKER"] = 2] = "BANKER";
    /**
     * 閒家
     *
     * @generated from enum value: PLAYER = 3;
     */
    Seat[Seat["PLAYER"] = 3] = "PLAYER";
    /**
     * Pitboss
     *
     * @generated from enum value: PITBOSS = 9;
     */
    Seat[Seat["PITBOSS"] = 9] = "PITBOSS";
})(Seat || (Seat = {}));
// Retrieve enum metadata with: proto3.getEnumType(Seat)
proto3.util.setEnumType(Seat, "games.threecards.Seat", [
    { no: 0, name: "SEAT_UNSPECIFIED" },
    { no: 1, name: "DEALER" },
    { no: 2, name: "BANKER" },
    { no: 3, name: "PLAYER" },
    { no: 9, name: "PITBOSS" },
]);
/**
 * 結果紀錄類型代碼
 *
 * @generated from enum games.threecards.ResultRecordType
 */
export var ResultRecordType;
(function (ResultRecordType) {
    /**
     * 未指定
     *
     * @generated from enum value: RESULT_RECORD_TYPE_UNSPECIFIED = 0;
     */
    ResultRecordType[ResultRecordType["RESULT_RECORD_TYPE_UNSPECIFIED"] = 0] = "RESULT_RECORD_TYPE_UNSPECIFIED";
    /**
     * 遊戲局結束
     *
     * @generated from enum value: ROUND_FINISH = 1;
     */
    ResultRecordType[ResultRecordType["ROUND_FINISH"] = 1] = "ROUND_FINISH";
    /**
     * Pitboss 修正
     *
     * @generated from enum value: PITBOSS_MODIFY_RESULT = 2;
     */
    ResultRecordType[ResultRecordType["PITBOSS_MODIFY_RESULT"] = 2] = "PITBOSS_MODIFY_RESULT";
})(ResultRecordType || (ResultRecordType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResultRecordType)
proto3.util.setEnumType(ResultRecordType, "games.threecards.ResultRecordType", [
    { no: 0, name: "RESULT_RECORD_TYPE_UNSPECIFIED" },
    { no: 1, name: "ROUND_FINISH" },
    { no: 2, name: "PITBOSS_MODIFY_RESULT" },
]);
/**
 * 取消原因
 *
 * @generated from enum games.threecards.CancelReason
 */
export var CancelReason;
(function (CancelReason) {
    /**
     * 未指定，沒有取消
     *
     * @generated from enum value: CANCEL_REASON_UNSPECIFIED = 0;
     */
    CancelReason[CancelReason["CANCEL_REASON_UNSPECIFIED"] = 0] = "CANCEL_REASON_UNSPECIFIED";
    /**
     * 取消說明原因
     *
     * @generated from enum value: NO_REASON = 1;
     */
    CancelReason[CancelReason["NO_REASON"] = 1] = "NO_REASON";
})(CancelReason || (CancelReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(CancelReason)
proto3.util.setEnumType(CancelReason, "games.threecards.CancelReason", [
    { no: 0, name: "CANCEL_REASON_UNSPECIFIED" },
    { no: 1, name: "NO_REASON" },
]);
/**
 * *
 * The state of the game flow
 *
 * @generated from enum games.threecards.GameState
 */
export var GameState;
(function (GameState) {
    /**
     * Idle
     *
     * @generated from enum value: STATE_IDLE = 0;
     */
    GameState[GameState["STATE_IDLE"] = 0] = "STATE_IDLE";
    /**
     * Game Starting
     *
     * @generated from enum value: STATE_START = 1;
     */
    GameState[GameState["STATE_START"] = 1] = "STATE_START";
    /**
     * Counuter Started
     *
     * @generated from enum value: STATE_COUNTER_START = 2;
     */
    GameState[GameState["STATE_COUNTER_START"] = 2] = "STATE_COUNTER_START";
    /**
     * Scan the dragon card
     *
     * @generated from enum value: STATE_DRAGON = 3;
     */
    GameState[GameState["STATE_DRAGON"] = 3] = "STATE_DRAGON";
    /**
     * Scan the phoenix card
     *
     * @generated from enum value: STATE_PHOENIX = 4;
     */
    GameState[GameState["STATE_PHOENIX"] = 4] = "STATE_PHOENIX";
    /**
     * Scan the dragon extra card
     *
     * @generated from enum value: STATE_DRAGON_LAST = 5;
     */
    GameState[GameState["STATE_DRAGON_LAST"] = 5] = "STATE_DRAGON_LAST";
    /**
     * Scan the phoenix extra card
     *
     * @generated from enum value: STATE_PHOENIX_LAST = 6;
     */
    GameState[GameState["STATE_PHOENIX_LAST"] = 6] = "STATE_PHOENIX_LAST";
    /**
     * Game Ended
     *
     * @generated from enum value: STATE_END = 7;
     */
    GameState[GameState["STATE_END"] = 7] = "STATE_END";
    /**
     * Wait for confirm
     *
     * @generated from enum value: STATE_CONFIRM = 8;
     */
    GameState[GameState["STATE_CONFIRM"] = 8] = "STATE_CONFIRM";
    /**
     * Scane the discard
     *
     * @generated from enum value: STATE_DISCARD = 9;
     */
    GameState[GameState["STATE_DISCARD"] = 9] = "STATE_DISCARD";
    /**
     * Shuffle cards
     *
     * @generated from enum value: STATE_SHUFFLE = 30;
     */
    GameState[GameState["STATE_SHUFFLE"] = 30] = "STATE_SHUFFLE";
})(GameState || (GameState = {}));
// Retrieve enum metadata with: proto3.getEnumType(GameState)
proto3.util.setEnumType(GameState, "games.threecards.GameState", [
    { no: 0, name: "STATE_IDLE" },
    { no: 1, name: "STATE_START" },
    { no: 2, name: "STATE_COUNTER_START" },
    { no: 3, name: "STATE_DRAGON" },
    { no: 4, name: "STATE_PHOENIX" },
    { no: 5, name: "STATE_DRAGON_LAST" },
    { no: 6, name: "STATE_PHOENIX_LAST" },
    { no: 7, name: "STATE_END" },
    { no: 8, name: "STATE_CONFIRM" },
    { no: 9, name: "STATE_DISCARD" },
    { no: 30, name: "STATE_SHUFFLE" },
]);
/**
 * WinType_PHOENIX 銀 右 莊
 * WinType_DRAGON 金 左 閒
 *
 * @generated from enum games.threecards.WinType
 */
export var WinType;
(function (WinType) {
    /**
     * @generated from enum value: NULL = 0;
     */
    WinType[WinType["NULL"] = 0] = "NULL";
    /**
     * @generated from enum value: DRAGON = 1;
     */
    WinType[WinType["DRAGON"] = 1] = "DRAGON";
    /**
     * @generated from enum value: PHOENIX = 2;
     */
    WinType[WinType["PHOENIX"] = 2] = "PHOENIX";
    /**
     * @generated from enum value: TIE = 3;
     */
    WinType[WinType["TIE"] = 3] = "TIE";
})(WinType || (WinType = {}));
// Retrieve enum metadata with: proto3.getEnumType(WinType)
proto3.util.setEnumType(WinType, "games.threecards.WinType", [
    { no: 0, name: "NULL" },
    { no: 1, name: "DRAGON" },
    { no: 2, name: "PHOENIX" },
    { no: 3, name: "TIE" },
]);
/**
 * 豹子 > 同花順 > 同花 > 順子 > 對子 > 散牌
 *
 * @generated from enum games.threecards.CardStyle
 */
export var CardStyle;
(function (CardStyle) {
    /**
     * 散牌
     *
     * @generated from enum value: NONE = 0;
     */
    CardStyle[CardStyle["NONE"] = 0] = "NONE";
    /**
     * 對子
     *
     * @generated from enum value: PAIR = 1;
     */
    CardStyle[CardStyle["PAIR"] = 1] = "PAIR";
    /**
     * 順子
     *
     * @generated from enum value: STRAIGHT = 2;
     */
    CardStyle[CardStyle["STRAIGHT"] = 2] = "STRAIGHT";
    /**
     * 同花
     *
     * @generated from enum value: FLUSH = 3;
     */
    CardStyle[CardStyle["FLUSH"] = 3] = "FLUSH";
    /**
     * 順子
     *
     * @generated from enum value: STRAIGHTF = 4;
     */
    CardStyle[CardStyle["STRAIGHTF"] = 4] = "STRAIGHTF";
    /**
     * 豹子
     *
     * @generated from enum value: LEOPARD = 5;
     */
    CardStyle[CardStyle["LEOPARD"] = 5] = "LEOPARD";
    /**
     * 豹子殺手
     *
     * @generated from enum value: LEOPARD_KILLER = 6;
     */
    CardStyle[CardStyle["LEOPARD_KILLER"] = 6] = "LEOPARD_KILLER";
})(CardStyle || (CardStyle = {}));
// Retrieve enum metadata with: proto3.getEnumType(CardStyle)
proto3.util.setEnumType(CardStyle, "games.threecards.CardStyle", [
    { no: 0, name: "NONE" },
    { no: 1, name: "PAIR" },
    { no: 2, name: "STRAIGHT" },
    { no: 3, name: "FLUSH" },
    { no: 4, name: "STRAIGHTF" },
    { no: 5, name: "LEOPARD" },
    { no: 6, name: "LEOPARD_KILLER" },
]);
/**
 * *
 * The status fo the current game.
 *
 * @generated from message games.threecards.GameStatus
 */
export class GameStatus extends Message {
    /**
     * Unique tableid
     *
     * @generated from field: string sessionID = 1;
     */
    sessionID = "";
    /**
     * Unique session for the game
     *
     * @generated from field: string gameRoundID = 2;
     */
    gameRoundID = "";
    /**
     * Unique tableid
     *
     * @generated from field: string tableID = 3;
     */
    tableID = "";
    /**
     * State of the game
     *
     * @generated from field: games.threecards.GameState state = 4;
     */
    state = GameState.STATE_IDLE;
    /**
     * Time when game start
     *
     * @generated from field: int64 startTime = 5;
     */
    startTime = protoInt64.zero;
    /**
     * Shoe ID
     *
     * @generated from field: string shoeID = 6;
     */
    shoeID = "";
    /**
     * @generated from field: int32 shoe = 7;
     */
    shoe = 0;
    /**
     * @generated from field: int32 round = 8;
     */
    round = 0;
    /**
     * Time when game start
     *
     * @generated from field: int64 shuffleTime = 9;
     */
    shuffleTime = protoInt64.zero;
    /**
     * Coundown value
     *
     * @generated from field: int32 countdown = 10;
     */
    countdown = 0;
    /**
     * If redcard scan
     *
     * @generated from field: bool redcard = 11;
     */
    redcard = false;
    /**
     * game specify information
     *
     * @generated from field: string dragon1 = 20;
     */
    dragon1 = "";
    /**
     * @generated from field: string dragon2 = 21;
     */
    dragon2 = "";
    /**
     * @generated from field: string dragon3 = 22;
     */
    dragon3 = "";
    /**
     * @generated from field: string phoenix1 = 23;
     */
    phoenix1 = "";
    /**
     * @generated from field: string phoenix2 = 24;
     */
    phoenix2 = "";
    /**
     * @generated from field: string phoenix3 = 25;
     */
    phoenix3 = "";
    /**
     * @generated from field: map<string, string> dragonBarcode = 26;
     */
    dragonBarcode = {};
    /**
     * @generated from field: map<string, string> phoenixBarcode = 27;
     */
    phoenixBarcode = {};
    /**
     * results
     *
     * Wintype
     *
     * @generated from field: games.threecards.WinType winType = 30;
     */
    winType = WinType.NULL;
    /**
     * @generated from field: string dragonResult = 31;
     */
    dragonResult = "";
    /**
     * @generated from field: string phoenixResult = 32;
     */
    phoenixResult = "";
    /**
     * @generated from field: games.threecards.CardStyle dragonResultInt = 33;
     */
    dragonResultInt = CardStyle.NONE;
    /**
     * @generated from field: games.threecards.CardStyle phoenixResultInt = 34;
     */
    phoenixResultInt = CardStyle.NONE;
    /**
     * @generated from field: string dragonWinValue = 35;
     */
    dragonWinValue = "";
    /**
     * @generated from field: string phoenixWinValue = 36;
     */
    phoenixWinValue = "";
    /**
     * store the bardcodehash for that round
     *
     * @generated from field: map<string, string> barcodeHash = 37;
     */
    barcodeHash = {};
    /**
     * store the bardcodehash SN for that round
     *
     * @generated from field: map<string, string> barcodeSN = 38;
     */
    barcodeSN = {};
    /**
     * blockchain
     *
     * masked cards sn slice for blockchan
     *
     * @generated from field: repeated string maskedCardsSN = 103;
     */
    maskedCardsSN = [];
    /**
     * sha256 cards from masked cards sn
     *
     * @generated from field: repeated string hashedCards = 104;
     */
    hashedCards = [];
    /**
     * show first card boolean when new shoe
     *
     * @generated from field: bool showFirstCard = 105;
     */
    showFirstCard = false;
    /**
     * first card of the shoe
     *
     * @generated from field: string firstCard = 106;
     */
    firstCard = "";
    /**
     * next card to show (i.e. first maskedCardsSN haven't been shown's index)
     *
     * @generated from field: int32 currentCardIndex = 107;
     */
    currentCardIndex = 0;
    /**
     * the red card index of the shoe
     *
     * @generated from field: int32 redCardIndex = 108;
     */
    redCardIndex = 0;
    /**
     * cosmos blockchain id for the shoe
     *
     * @generated from field: string cosmosShoeID = 109;
     */
    cosmosShoeID = "";
    /**
     * length of hashedCards
     *
     * @generated from field: int32 hashedLength = 110;
     */
    hashedLength = 0;
    /**
     * Lucky Number and payout ratio
     *
     * @generated from field: map<string, int32> lucky = 150;
     */
    lucky = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "games.threecards.GameStatus";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "sessionID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "gameRoundID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "tableID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(GameState) },
        { no: 5, name: "startTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 6, name: "shoeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shoe", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 8, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 9, name: "shuffleTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 10, name: "countdown", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 11, name: "redcard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 20, name: "dragon1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "dragon2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 22, name: "dragon3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 23, name: "phoenix1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 24, name: "phoenix2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 25, name: "phoenix3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 26, name: "dragonBarcode", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 27, name: "phoenixBarcode", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 30, name: "winType", kind: "enum", T: proto3.getEnumType(WinType) },
        { no: 31, name: "dragonResult", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 32, name: "phoenixResult", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 33, name: "dragonResultInt", kind: "enum", T: proto3.getEnumType(CardStyle) },
        { no: 34, name: "phoenixResultInt", kind: "enum", T: proto3.getEnumType(CardStyle) },
        { no: 35, name: "dragonWinValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 36, name: "phoenixWinValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 37, name: "barcodeHash", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 38, name: "barcodeSN", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 103, name: "maskedCardsSN", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 104, name: "hashedCards", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 105, name: "showFirstCard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 106, name: "firstCard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 107, name: "currentCardIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 108, name: "redCardIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 109, name: "cosmosShoeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 110, name: "hashedLength", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 150, name: "lucky", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 5 /* ScalarType.INT32 */ } },
    ]);
    static fromBinary(bytes, options) {
        return new GameStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GameStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GameStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GameStatus, a, b);
    }
}
