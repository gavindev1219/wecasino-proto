// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file games/fantan/record.proto (package games.fantan, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from enum games.fantan.ResourceType
 */
export var ResourceType;
(function (ResourceType) {
    /**
     * 未指定
     *
     * @generated from enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
     */
    ResourceType[ResourceType["RESOURCE_TYPE_UNSPECIFIED"] = 0] = "RESOURCE_TYPE_UNSPECIFIED";
    /**
     * 牌靴
     *
     * @generated from enum value: SHOE = 1;
     */
    ResourceType[ResourceType["SHOE"] = 1] = "SHOE";
    /**
     * 碗公
     *
     * @generated from enum value: BOWL = 2;
     */
    ResourceType[ResourceType["BOWL"] = 2] = "BOWL";
})(ResourceType || (ResourceType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResourceType)
proto3.util.setEnumType(ResourceType, "games.fantan.ResourceType", [
    { no: 0, name: "RESOURCE_TYPE_UNSPECIFIED" },
    { no: 1, name: "SHOE" },
    { no: 2, name: "BOWL" },
]);
/**
 * 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
 *
 * @generated from enum games.fantan.Step
 */
export var Step;
(function (Step) {
    /**
     * 未指定
     *
     * @generated from enum value: STEP_UNSPECIFIED = 0;
     */
    Step[Step["STEP_UNSPECIFIED"] = 0] = "STEP_UNSPECIFIED";
    /**
     * 本局開始
     *
     * @generated from enum value: ROUND_START = 1;
     */
    Step[Step["ROUND_START"] = 1] = "ROUND_START";
    /**
     * 本局完成
     *
     * @generated from enum value: ROUND_FINISHED = 2;
     */
    Step[Step["ROUND_FINISHED"] = 2] = "ROUND_FINISHED";
    /**
     * 本局取消
     *
     * @generated from enum value: ROUND_CANCELED = 3;
     */
    Step[Step["ROUND_CANCELED"] = 3] = "ROUND_CANCELED";
    /**
     * 開放下注
     *
     * @generated from enum value: OPEN_FOR_BETTING = 4;
     */
    Step[Step["OPEN_FOR_BETTING"] = 4] = "OPEN_FOR_BETTING";
    /**
     * 停止下注
     *
     * @generated from enum value: CLOSE_THE_BETTING = 5;
     */
    Step[Step["CLOSE_THE_BETTING"] = 5] = "CLOSE_THE_BETTING";
    /**
     * 抓籽
     *
     * @generated from enum value: GRAB_DICE_AMOUNT = 8;
     */
    Step[Step["GRAB_DICE_AMOUNT"] = 8] = "GRAB_DICE_AMOUNT";
    /**
     * PITBOSS 修改骰點
     *
     * @generated from enum value: PITBOSS_MODIFY_BOWL = 16;
     */
    Step[Step["PITBOSS_MODIFY_BOWL"] = 16] = "PITBOSS_MODIFY_BOWL";
})(Step || (Step = {}));
// Retrieve enum metadata with: proto3.getEnumType(Step)
proto3.util.setEnumType(Step, "games.fantan.Step", [
    { no: 0, name: "STEP_UNSPECIFIED" },
    { no: 1, name: "ROUND_START" },
    { no: 2, name: "ROUND_FINISHED" },
    { no: 3, name: "ROUND_CANCELED" },
    { no: 4, name: "OPEN_FOR_BETTING" },
    { no: 5, name: "CLOSE_THE_BETTING" },
    { no: 8, name: "GRAB_DICE_AMOUNT" },
    { no: 16, name: "PITBOSS_MODIFY_BOWL" },
]);
/**
 * 座位功能代碼
 *
 * @generated from enum games.fantan.Seat
 */
export var Seat;
(function (Seat) {
    /**
     * 未指定
     *
     * @generated from enum value: SEAT_UNSPECIFIED = 0;
     */
    Seat[Seat["SEAT_UNSPECIFIED"] = 0] = "SEAT_UNSPECIFIED";
    /**
     * Dealer
     *
     * @generated from enum value: DEALER = 1;
     */
    Seat[Seat["DEALER"] = 1] = "DEALER";
    /**
     * Pitboss
     *
     * @generated from enum value: PITBOSS = 9;
     */
    Seat[Seat["PITBOSS"] = 9] = "PITBOSS";
})(Seat || (Seat = {}));
// Retrieve enum metadata with: proto3.getEnumType(Seat)
proto3.util.setEnumType(Seat, "games.fantan.Seat", [
    { no: 0, name: "SEAT_UNSPECIFIED" },
    { no: 1, name: "DEALER" },
    { no: 9, name: "PITBOSS" },
]);
/**
 * 結果紀錄類型代碼
 *
 * @generated from enum games.fantan.ResultRecordType
 */
export var ResultRecordType;
(function (ResultRecordType) {
    /**
     * 未指定
     *
     * @generated from enum value: RESULT_RECORD_TYPE_UNSPECIFIED = 0;
     */
    ResultRecordType[ResultRecordType["RESULT_RECORD_TYPE_UNSPECIFIED"] = 0] = "RESULT_RECORD_TYPE_UNSPECIFIED";
    /**
     * 遊戲局結束
     *
     * @generated from enum value: ROUND_FINISH = 1;
     */
    ResultRecordType[ResultRecordType["ROUND_FINISH"] = 1] = "ROUND_FINISH";
    /**
     * Pitboss 修正
     *
     * @generated from enum value: PITBOSS_MODIFY_RESULT = 2;
     */
    ResultRecordType[ResultRecordType["PITBOSS_MODIFY_RESULT"] = 2] = "PITBOSS_MODIFY_RESULT";
})(ResultRecordType || (ResultRecordType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResultRecordType)
proto3.util.setEnumType(ResultRecordType, "games.fantan.ResultRecordType", [
    { no: 0, name: "RESULT_RECORD_TYPE_UNSPECIFIED" },
    { no: 1, name: "ROUND_FINISH" },
    { no: 2, name: "PITBOSS_MODIFY_RESULT" },
]);
/**
 * *
 * The state of the game flow
 *
 * @generated from enum games.fantan.GameState
 */
export var GameState;
(function (GameState) {
    /**
     * Idle
     *
     * @generated from enum value: STATE_IDLE = 0;
     */
    GameState[GameState["STATE_IDLE"] = 0] = "STATE_IDLE";
    /**
     * Game Starting
     *
     * @generated from enum value: STATE_START = 1;
     */
    GameState[GameState["STATE_START"] = 1] = "STATE_START";
    /**
     * Counuter Started
     *
     * @generated from enum value: STATE_COUNTER_START = 2;
     */
    GameState[GameState["STATE_COUNTER_START"] = 2] = "STATE_COUNTER_START";
    /**
     * Wait for input
     *
     * @generated from enum value: STATE_INPUT = 3;
     */
    GameState[GameState["STATE_INPUT"] = 3] = "STATE_INPUT";
    /**
     * Game Ended
     *
     * @generated from enum value: STATE_END = 7;
     */
    GameState[GameState["STATE_END"] = 7] = "STATE_END";
    /**
     * Game Ended
     *
     * @generated from enum value: STATE_CONFIRM = 8;
     */
    GameState[GameState["STATE_CONFIRM"] = 8] = "STATE_CONFIRM";
    /**
     * Shuffle cards
     *
     * @generated from enum value: STATE_SHUFFLE = 30;
     */
    GameState[GameState["STATE_SHUFFLE"] = 30] = "STATE_SHUFFLE";
})(GameState || (GameState = {}));
// Retrieve enum metadata with: proto3.getEnumType(GameState)
proto3.util.setEnumType(GameState, "games.fantan.GameState", [
    { no: 0, name: "STATE_IDLE" },
    { no: 1, name: "STATE_START" },
    { no: 2, name: "STATE_COUNTER_START" },
    { no: 3, name: "STATE_INPUT" },
    { no: 7, name: "STATE_END" },
    { no: 8, name: "STATE_CONFIRM" },
    { no: 30, name: "STATE_SHUFFLE" },
]);
/**
 * *
 * The status of the current game.
 *
 * @generated from message games.fantan.GameStatus
 */
export class GameStatus extends Message {
    /**
     * Unique tableid
     *
     * @generated from field: string session_id = 1;
     */
    sessionId = "";
    /**
     * Unique session for the game
     *
     * @generated from field: string game_round_id = 2;
     */
    gameRoundId = "";
    /**
     * Unique tableid
     *
     * @generated from field: string table_id = 3;
     */
    tableId = "";
    /**
     * State of the game
     *
     * @generated from field: games.fantan.GameState state = 4;
     */
    state = GameState.STATE_IDLE;
    /**
     * Time when game start
     *
     * @generated from field: int64 ts_start = 5;
     */
    tsStart = protoInt64.zero;
    /**
     * Shoe ID
     *
     * @generated from field: string shoe_id = 6;
     */
    shoeId = "";
    /**
     * @generated from field: int32 shoe = 7;
     */
    shoe = 0;
    /**
     * @generated from field: int32 round = 8;
     */
    round = 0;
    /**
     * @generated from field: int32 count = 9;
     */
    count = 0;
    /**
     * @generated from field: int32 fan = 10;
     */
    fan = 0;
    /**
     * @generated from field: int32 odd = 11;
     */
    odd = 0;
    /**
     * Coundown value
     *
     * @generated from field: int32 countdown = 16;
     */
    countdown = 0;
    /**
     * Deal start time for blockchain
     *
     * @generated from field: int64 ts_deal = 18;
     */
    tsDeal = protoInt64.zero;
    /**
     * Deal count down for  blockchain
     *
     * @generated from field: int64 deal_countdown = 19;
     */
    dealCountdown = protoInt64.zero;
    /**
     * maskedcardssn for blockchain
     *
     * @generated from field: string masked_card_sn = 20;
     */
    maskedCardSn = "";
    /**
     * Lucky Number and payout ratio
     *
     * @generated from field: map<string, int32> lucky = 150;
     */
    lucky = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "games.fantan.GameStatus";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "game_round_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(GameState) },
        { no: 5, name: "ts_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 6, name: "shoe_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shoe", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 8, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 9, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 10, name: "fan", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 11, name: "odd", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 16, name: "countdown", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 18, name: "ts_deal", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 19, name: "deal_countdown", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 20, name: "masked_card_sn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 150, name: "lucky", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 5 /* ScalarType.INT32 */ } },
    ]);
    static fromBinary(bytes, options) {
        return new GameStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GameStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GameStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GameStatus, a, b);
    }
}
