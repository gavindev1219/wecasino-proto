// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none"
// @generated from file recorder/record.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * 動作類型
 *
 * @generated from enum recorder.StepActionType
 */
export var StepActionType;
(function (StepActionType) {
    /**
     * 未指定
     *
     * @generated from enum value: STEP_ACTION_TYPE_UNSPECIFIED = 0;
     */
    StepActionType[StepActionType["STEP_ACTION_TYPE_UNSPECIFIED"] = 0] = "STEP_ACTION_TYPE_UNSPECIFIED";
    /**
     * 派發資源
     *
     * @generated from enum value: ADD = 1;
     */
    StepActionType[StepActionType["ADD"] = 1] = "ADD";
    /**
     * 設定指定資源
     *
     * @generated from enum value: SET = 2;
     */
    StepActionType[StepActionType["SET"] = 2] = "SET";
    /**
     * 改寫全部資源;
     *
     * @generated from enum value: SETALL = 3;
     */
    StepActionType[StepActionType["SETALL"] = 3] = "SETALL";
    /**
     * 將資源從場上移除
     *
     * @generated from enum value: REMOVE = 4;
     */
    StepActionType[StepActionType["REMOVE"] = 4] = "REMOVE";
    /**
     * 讀取卡牌資料
     *
     * @generated from enum value: READ = 5;
     */
    StepActionType[StepActionType["READ"] = 5] = "READ";
    /**
     * 讀卡但不可見
     *
     * @generated from enum value: READ_UNVISIBLE = 6;
     */
    StepActionType[StepActionType["READ_UNVISIBLE"] = 6] = "READ_UNVISIBLE";
    /**
     * 移轉資源
     *
     * @generated from enum value: TRANSFER = 7;
     */
    StepActionType[StepActionType["TRANSFER"] = 7] = "TRANSFER";
    /**
     * 卡片正反面
     *
     * @generated from enum value: VISIBLE = 8;
     */
    StepActionType[StepActionType["VISIBLE"] = 8] = "VISIBLE";
    /**
     * 卡牌狀態改變
     *
     * @generated from enum value: STATUS = 9;
     */
    StepActionType[StepActionType["STATUS"] = 9] = "STATUS";
    /**
     * 此步驟不須修改資源
     *
     * @generated from enum value: NONE = 10;
     */
    StepActionType[StepActionType["NONE"] = 10] = "NONE";
})(StepActionType || (StepActionType = {}));
// Retrieve enum metadata with: proto3.getEnumType(StepActionType)
proto3.util.setEnumType(StepActionType, "recorder.StepActionType", [
    { no: 0, name: "STEP_ACTION_TYPE_UNSPECIFIED" },
    { no: 1, name: "ADD" },
    { no: 2, name: "SET" },
    { no: 3, name: "SETALL" },
    { no: 4, name: "REMOVE" },
    { no: 5, name: "READ" },
    { no: 6, name: "READ_UNVISIBLE" },
    { no: 7, name: "TRANSFER" },
    { no: 8, name: "VISIBLE" },
    { no: 9, name: "STATUS" },
    { no: 10, name: "NONE" },
]);
/**
 * 卡牌，代表在此局中使用的各類物品
 *
 * @generated from message recorder.Card
 */
export class Card extends Message {
    /**
     * 卡牌代碼
     *
     * @generated from field: string code = 1;
     */
    code = "";
    /**
     * 卡牌ID：牌唯一碼，同ID表示同一張實體牌。不使用此欄位填0。
     *
     * @generated from field: string id = 2;
     */
    id = "";
    /**
     * 明文
     *
     * @generated from field: string plain_text = 4;
     */
    plainText = "";
    /**
     * 簽章
     *
     * @generated from field: string signature = 5;
     */
    signature = "";
    /**
     * 簽章方法
     *
     * @generated from field: string sign_method = 6;
     */
    signMethod = "";
    /**
     * 順序
     *
     * @generated from field: int64 index = 8;
     */
    index = protoInt64.zero;
    /**
     * 可見
     *
     * @generated from field: bool visible = 9;
     */
    visible = false;
    /**
     * 橫放、直放...
     *
     * @generated from field: int32 status = 10;
     */
    status = 0;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.Card";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "plain_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "sign_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 9, name: "visible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 10, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Card().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Card().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Card().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Card, a, b);
    }
}
/**
 * 卡牌列表
 *
 * @generated from message recorder.CardList
 */
export class CardList extends Message {
    /**
     * @generated from field: string card_type = 1;
     */
    cardType = "";
    /**
     * 列表
     *
     * @generated from field: repeated recorder.Card list = 2;
     */
    list = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.CardList";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "card_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "list", kind: "message", T: Card, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CardList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CardList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CardList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CardList, a, b);
    }
}
/**
 * 執行動作：對某些資源進行增、刪、移轉
 *
 * @generated from message recorder.StepAction
 */
export class StepAction extends Message {
    /**
     * 行為說明代碼：StepActionCode
     *
     * @generated from field: int32 code = 1;
     */
    code = 0;
    /**
     * 資源擁有座位。
     *
     * @generated from field: int32 source_seat = 3;
     */
    sourceSeat = 0;
    /**
     * 資源轉移目標座位。
     *
     * @generated from field: int32 target_seat = 4;
     */
    targetSeat = 0;
    /**
     * 目標卡牌資源
     * key: ResourceTypeCode, value: 卡牌陣列
     *
     * @generated from field: map<int32, recorder.CardList> cards = 6;
     */
    cards = {};
    /**
     * 目標分數資源
     * key: ResourceTypeCode, value: 分數值。
     *
     * @generated from field: map<int32, int64> scores = 7;
     */
    scores = {};
    /**
     * 動作類型
     *
     * @generated from field: recorder.StepActionType type = 8;
     */
    type = StepActionType.STEP_ACTION_TYPE_UNSPECIFIED;
    /**
     * （可選）附加資料
     *
     * @generated from field: google.protobuf.Any data = 9;
     */
    data;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.StepAction";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 3, name: "source_seat", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 4, name: "target_seat", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 6, name: "cards", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: CardList } },
        { no: 7, name: "scores", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "scalar", T: 3 /* ScalarType.INT64 */ } },
        { no: 8, name: "type", kind: "enum", T: proto3.getEnumType(StepActionType) },
        { no: 9, name: "data", kind: "message", T: Any },
    ]);
    static fromBinary(bytes, options) {
        return new StepAction().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StepAction().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StepAction().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StepAction, a, b);
    }
}
/**
 * 遊戲步驟
 *
 * @generated from message recorder.Step
 */
export class Step extends Message {
    /**
     * 步驟代碼：StepCode
     *
     * @generated from field: int32 code = 1;
     */
    code = 0;
    /**
     * 玩家、執行者：SeatCode
     *
     * @generated from field: int32 seat = 3;
     */
    seat = 0;
    /**
     * 時間戳
     *
     * @generated from field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp;
    /**
     * 執行動作
     *
     * @generated from field: repeated recorder.StepAction actions = 6;
     */
    actions = [];
    /**
     * 執行錯誤
     *
     * @generated from field: string error = 8;
     */
    error = "";
    /**
     * 取消
     *
     * @generated from field: bool cancel = 9;
     */
    cancel = false;
    /**
     * 分配毫秒數
     *
     * @generated from field: int64 duration = 10;
     */
    duration = protoInt64.zero;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.Step";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 3, name: "seat", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 5, name: "timestamp", kind: "message", T: Timestamp },
        { no: 6, name: "actions", kind: "message", T: StepAction, repeated: true },
        { no: 8, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "cancel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 10, name: "duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Step().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Step().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Step().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Step, a, b);
    }
}
/**
 * 座位
 *
 * @generated from message recorder.Seat
 */
export class Seat extends Message {
    /**
     * 座位功能代碼：SeatCode
     *
     * @generated from field: int32 code = 1;
     */
    code = 0;
    /**
     * 各類手牌
     * key: ResourceTypeCode, value: 卡牌陣列
     *
     * @generated from field: map<int32, recorder.CardList> cards = 6;
     */
    cards = {};
    /**
     * 各類分數
     * key: ResourceTypeCode, value: 分數值。
     *
     * @generated from field: map<int32, int64> scores = 8;
     */
    scores = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.Seat";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 6, name: "cards", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: CardList } },
        { no: 8, name: "scores", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "scalar", T: 3 /* ScalarType.INT64 */ } },
    ]);
    static fromBinary(bytes, options) {
        return new Seat().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Seat().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Seat().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Seat, a, b);
    }
}
/**
 * 記錄各座位狀態
 *
 * @generated from message recorder.Result
 */
export class Result extends Message {
    /**
     * 判讀類型代碼：ResultRecordTypeCode
     *
     * @generated from field: int32 code = 1;
     */
    code = 0;
    /**
     * 紀錄者座位代碼
     *
     * @generated from field: int32 by_seat = 3;
     */
    bySeat = 0;
    /**
     * 時間戳
     *
     * @generated from field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp;
    /**
     * 座位組
     * key: SeatCode, value: Seat
     *
     * @generated from field: map<int32, recorder.Seat> seats = 6;
     */
    seats = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.Result";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 3, name: "by_seat", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 5, name: "timestamp", kind: "message", T: Timestamp },
        { no: 6, name: "seats", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: Seat } },
    ]);
    static fromBinary(bytes, options) {
        return new Result().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Result().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Result().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Result, a, b);
    }
}
/**
 * 紀錄
 *
 * @generated from message recorder.RoundRecord
 */
export class RoundRecord extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 3;
     */
    gameSubtype = "";
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 4;
     */
    gameVersion = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 5;
     */
    tableCode = "";
    /**
     * 局代碼
     *
     * @generated from field: string round_code = 6;
     */
    roundCode = "";
    /**
     * 使用牌靴
     *
     * @generated from field: string shuffle_code = 7;
     */
    shuffleCode = "";
    /**
     * 使用此洗牌第幾局，從1開始計算
     *
     * @generated from field: int64 shuffle_round = 8;
     */
    shuffleRound = protoInt64.zero;
    /**
     * 座位組
     * key: SeatCode, value: Seat
     *
     * @generated from field: map<int32, recorder.Seat> seats = 10;
     */
    seats = {};
    /**
     * 玩家入座
     * key: SeatCode, value: 玩家code。
     *
     * @generated from field: map<int32, string> players = 11;
     */
    players = {};
    /**
     * 歷程
     *
     * @generated from field: repeated recorder.Step process = 12;
     */
    process = [];
    /**
     * 判讀
     *
     * @generated from field: repeated recorder.Result results = 13;
     */
    results = [];
    /**
     * 取消
     *
     * @generated from field: bool cancel = 14;
     */
    cancel = false;
    /**
     * 取消代碼：CancelReasonCode
     *
     * @generated from field: string cancel_code = 15;
     */
    cancelCode = "";
    /**
     * 取消備註
     *
     * @generated from field: string cancel_message = 16;
     */
    cancelMessage = "";
    /**
     * 標籤
     *
     * @generated from field: map<string, string> tags = 17;
     */
    tags = {};
    /**
     * 開始時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 18;
     */
    tsStart;
    /**
     * 結束時間
     *
     * @generated from field: google.protobuf.Timestamp ts_end = 19;
     */
    tsEnd;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RoundRecord";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "shuffle_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 10, name: "seats", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: Seat } },
        { no: 11, name: "players", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 12, name: "process", kind: "message", T: Step, repeated: true },
        { no: 13, name: "results", kind: "message", T: Result, repeated: true },
        { no: 14, name: "cancel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 15, name: "cancel_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 16, name: "cancel_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 17, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 18, name: "ts_start", kind: "message", T: Timestamp },
        { no: 19, name: "ts_end", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RoundRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoundRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoundRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RoundRecord, a, b);
    }
}
/**
 * @generated from message recorder.Deck
 */
export class Deck extends Message {
    /**
     * 卡牌
     *
     * @generated from field: recorder.CardList cards = 1;
     */
    cards;
    /**
     * 起始位置（削牌後）
     *
     * @generated from field: int64 start_index = 2;
     */
    startIndex = protoInt64.zero;
    /**
     * 切牌位置
     *
     * @generated from field: int64 cut_index = 3;
     */
    cutIndex = protoInt64.zero;
    /**
     * 目前位置
     *
     * @generated from field: int64 index = 4;
     */
    index = protoInt64.zero;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.Deck";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "cards", kind: "message", T: CardList },
        { no: 2, name: "start_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "cut_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Deck().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Deck().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Deck().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Deck, a, b);
    }
}
/**
 * 洗牌紀錄
 *
 * @generated from message recorder.ShuffleRecord
 */
export class ShuffleRecord extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes id = 1;
     */
    id = new Uint8Array(0);
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 3;
     */
    gameSubtype = "";
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 4;
     */
    gameVersion = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 5;
     */
    tableCode = "";
    /**
     * 使用洗牌ID
     *
     * @generated from field: string shuffle_code = 6;
     */
    shuffleCode = "";
    /**
     * 開始洗牌時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 7;
     */
    tsStart;
    /**
     * 結束洗牌時間
     *
     * @generated from field: google.protobuf.Timestamp ts_end = 8;
     */
    tsEnd;
    /**
     * cardList
     *
     * @generated from field: map<int32, recorder.Deck> decks = 11;
     */
    decks = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.ShuffleRecord";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "ts_start", kind: "message", T: Timestamp },
        { no: 8, name: "ts_end", kind: "message", T: Timestamp },
        { no: 11, name: "decks", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: Deck } },
    ]);
    static fromBinary(bytes, options) {
        return new ShuffleRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ShuffleRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ShuffleRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ShuffleRecord, a, b);
    }
}
