// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none"
// @generated from file recorder/recorder.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { CardList, Result, RoundRecord, ShuffleRecord, Step } from "./record_pb";
/**
 * @generated from message recorder.RecordIDResponse
 */
export class RecordIDResponse extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordIDResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordIDResponse, a, b);
    }
}
/**
 * @generated from message recorder.RecordShuffleStartedRequest
 */
export class RecordShuffleStartedRequest extends Message {
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 3;
     */
    tableCode = "";
    /**
     * 洗牌代碼
     *
     * @generated from field: string shuffle_code = 4;
     */
    shuffleCode = "";
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 5;
     */
    tsStart;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShuffleStartedRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "ts_start", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShuffleStartedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShuffleStartedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShuffleStartedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShuffleStartedRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordShuffleDoneRequest
 */
export class RecordShuffleDoneRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_done = 5;
     */
    tsDone;
    /**
     * 使用洗牌代碼
     *
     * @generated from field: string shuffle_code = 6;
     */
    shuffleCode = "";
    /**
     * 洗牌類型
     * key: ResourceTypeCode；value: 卡牌陣列
     *
     * @generated from field: map<int32, recorder.CardList> cards = 7;
     */
    cards = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShuffleDoneRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_done", kind: "message", T: Timestamp },
        { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "cards", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: CardList } },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShuffleDoneRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShuffleDoneRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShuffleDoneRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShuffleDoneRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundStartRequest
 */
export class RecordRoundStartRequest extends Message {
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 3;
     */
    tableCode = "";
    /**
     * 局代碼
     *
     * @generated from field: string round_code = 4;
     */
    roundCode = "";
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 5;
     */
    tsStart;
    /**
     * 使用洗牌代碼
     *
     * @generated from field: string shuffle_code = 6;
     */
    shuffleCode = "";
    /**
     * 使用此洗牌第幾局，從1開始計算
     *
     * @generated from field: int64 shuffle_round = 7;
     */
    shuffleRound = protoInt64.zero;
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 8;
     */
    gameVersion = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundStartRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "ts_start", kind: "message", T: Timestamp },
        { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shuffle_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 8, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundStartRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundStartRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundStartRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundStartRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundStepsRequest
 */
export class RecordRoundStepsRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 步驟
     *
     * @generated from field: repeated recorder.Step steps = 5;
     */
    steps = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundStepsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "steps", kind: "message", T: Step, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundStepsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundStepsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundStepsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundStepsRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundResultsRequest
 */
export class RecordRoundResultsRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 判讀結果
     *
     * @generated from field: repeated recorder.Result results = 6;
     */
    results = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundResultsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 6, name: "results", kind: "message", T: Result, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundResultsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundResultsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundResultsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundResultsRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundCancelRequest
 */
export class RecordRoundCancelRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_cancel = 5;
     */
    tsCancel;
    /**
     * 取消代碼
     *
     * @generated from field: string cancel_code = 6;
     */
    cancelCode = "";
    /**
     * 取消備註
     *
     * @generated from field: string cancel_message = 7;
     */
    cancelMessage = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundCancelRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_cancel", kind: "message", T: Timestamp },
        { no: 6, name: "cancel_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "cancel_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundCancelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundCancelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundCancelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundCancelRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundFinishRequest
 */
export class RecordRoundFinishRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_finish = 5;
     */
    tsFinish;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundFinishRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_finish", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundFinishRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundFinishRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundFinishRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundFinishRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordQuery
 */
export class RecordQuery extends Message {
    /**
     * 查詢起時
     *
     * @generated from field: google.protobuf.Timestamp ts_from = 1;
     */
    tsFrom;
    /**
     * 查詢終時
     *
     * @generated from field: google.protobuf.Timestamp ts_to = 2;
     */
    tsTo;
    /**
     * 筆數
     *
     * @generated from field: int64 limit = 3;
     */
    limit = protoInt64.zero;
    /**
     * 頁面
     *
     * @generated from field: int64 page = 4;
     */
    page = protoInt64.zero;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordQuery";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "ts_from", kind: "message", T: Timestamp },
        { no: 2, name: "ts_to", kind: "message", T: Timestamp },
        { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "page", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordQuery().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordQuery().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordQuery().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordQuery, a, b);
    }
}
/**
 * @generated from message recorder.FetchShuffleRecordRequest
 */
export class FetchShuffleRecordRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 3;
     */
    tableCode = "";
    /**
     * 洗牌代碼
     *
     * @generated from field: string shuffle_code = 4;
     */
    shuffleCode = "";
    /**
     * 允許的紀錄ID
     *
     * @generated from field: repeated bytes record_ids = 5;
     */
    recordIds = [];
    /**
     * 允許的遊戲類型
     *
     * @generated from field: repeated string game_types = 6;
     */
    gameTypes = [];
    /**
     * 允許的桌代碼
     *
     * @generated from field: repeated string table_codes = 7;
     */
    tableCodes = [];
    /**
     * 允許的洗牌代碼
     *
     * @generated from field: repeated string shuffle_codes = 8;
     */
    shuffleCodes = [];
    /**
     * 查詢限制
     *
     * @generated from field: recorder.RecordQuery query = 9;
     */
    query;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchShuffleRecordRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 6, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 7, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 8, name: "shuffle_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 9, name: "query", kind: "message", T: RecordQuery },
    ]);
    static fromBinary(bytes, options) {
        return new FetchShuffleRecordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchShuffleRecordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchShuffleRecordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchShuffleRecordRequest, a, b);
    }
}
/**
 * @generated from message recorder.FetchRecordShuffleResponse
 */
export class FetchRecordShuffleResponse extends Message {
    /**
     * @generated from field: repeated recorder.ShuffleRecord shuffle_record = 1;
     */
    shuffleRecord = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchRecordShuffleResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "shuffle_record", kind: "message", T: ShuffleRecord, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchRecordShuffleResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchRecordShuffleResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchRecordShuffleResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchRecordShuffleResponse, a, b);
    }
}
/**
 * @generated from message recorder.FetchRoundRecordRequest
 */
export class FetchRoundRecordRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 3;
     */
    tableCode = "";
    /**
     * 局代碼
     *
     * @generated from field: string round_code = 4;
     */
    roundCode = "";
    /**
     * 允許的紀錄ID
     *
     * @generated from field: repeated bytes record_ids = 5;
     */
    recordIds = [];
    /**
     * 允許的遊戲類型
     *
     * @generated from field: repeated string game_types = 6;
     */
    gameTypes = [];
    /**
     * 允許的桌代碼
     *
     * @generated from field: repeated string table_codes = 7;
     */
    tableCodes = [];
    /**
     * 允許的局代碼
     *
     * @generated from field: repeated string round_codes = 8;
     */
    roundCodes = [];
    /**
     * 查詢限制
     *
     * @generated from field: recorder.RecordQuery query = 9;
     */
    query;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchRoundRecordRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 6, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 7, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 8, name: "round_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 9, name: "query", kind: "message", T: RecordQuery },
    ]);
    static fromBinary(bytes, options) {
        return new FetchRoundRecordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchRoundRecordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchRoundRecordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchRoundRecordRequest, a, b);
    }
}
/**
 * @generated from message recorder.FetchRoundRecordResponse
 */
export class FetchRoundRecordResponse extends Message {
    /**
     * @generated from field: repeated recorder.RoundRecord round_record = 1;
     */
    roundRecord = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchRoundRecordResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "round_record", kind: "message", T: RoundRecord, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchRoundRecordResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchRoundRecordResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchRoundRecordResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchRoundRecordResponse, a, b);
    }
}
