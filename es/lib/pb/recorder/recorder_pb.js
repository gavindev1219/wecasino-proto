// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file recorder/recorder.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Deck, Result, Step, URLMedia } from "./record_pb";
/**
 * @generated from message recorder.RecordIDResponse
 */
export class RecordIDResponse extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordIDResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordIDResponse, a, b);
    }
}
/**
 * @generated from message recorder.RecordShiftStartedRequest
 */
export class RecordShiftStartedRequest extends Message {
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 3;
     */
    gameSubtype = "";
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 4;
     */
    gameVersion = "";
    /**
     * 遊戲代碼
     *
     * @generated from field: string game_code = 5;
     */
    gameCode = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 6;
     */
    tableCode = "";
    /**
     * 班代碼
     *
     * @generated from field: string shift_code = 7;
     */
    shiftCode = "";
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 8;
     */
    tsStart;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShiftStartedRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "game_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shift_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "ts_start", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShiftStartedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShiftStartedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShiftStartedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShiftStartedRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordShiftEndedRequest
 */
export class RecordShiftEndedRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_end = 5;
     */
    tsEnd;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShiftEndedRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_end", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShiftEndedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShiftEndedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShiftEndedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShiftEndedRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordShuffleStartedRequest
 */
export class RecordShuffleStartedRequest extends Message {
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 3;
     */
    gameSubtype = "";
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 4;
     */
    gameVersion = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 5;
     */
    tableCode = "";
    /**
     * 洗牌代碼
     *
     * @generated from field: string shuffle_code = 6;
     */
    shuffleCode = "";
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 7;
     */
    tsStart;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShuffleStartedRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "ts_start", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShuffleStartedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShuffleStartedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShuffleStartedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShuffleStartedRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordShuffleDoneRequest
 */
export class RecordShuffleDoneRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_done = 5;
     */
    tsDone;
    /**
     * 洗牌類型
     * key: ResourceTypeCode；value: 牌靴
     *
     * @generated from field: map<int32, recorder.Deck> cards = 7;
     */
    cards = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordShuffleDoneRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_done", kind: "message", T: Timestamp },
        { no: 7, name: "cards", kind: "map", K: 5 /* ScalarType.INT32 */, V: { kind: "message", T: Deck } },
    ]);
    static fromBinary(bytes, options) {
        return new RecordShuffleDoneRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordShuffleDoneRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordShuffleDoneRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordShuffleDoneRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundStartRequest
 */
export class RecordRoundStartRequest extends Message {
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 2;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 3;
     */
    gameSubtype = "";
    /**
     * 遊戲版本
     *
     * @generated from field: string game_version = 4;
     */
    gameVersion = "";
    /**
     * 遊戲代碼
     *
     * @generated from field: string game_code = 5;
     */
    gameCode = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 6;
     */
    tableCode = "";
    /**
     * 排班代碼
     *
     * @generated from field: string shift_code = 7;
     */
    shiftCode = "";
    /**
     * 此排班局數
     *
     * @generated from field: string shift_round = 8;
     */
    shiftRound = "";
    /**
     * 局代碼
     *
     * @generated from field: string round_code = 9;
     */
    roundCode = "";
    /**
     * 使用洗牌代碼
     *
     * @generated from field: string shuffle_code = 10;
     */
    shuffleCode = "";
    /**
     * 使用此洗牌第幾局，從1開始計算
     *
     * @generated from field: int64 shuffle_round = 11;
     */
    shuffleRound = protoInt64.zero;
    /**
     * 開始時間
     *
     * @generated from field: google.protobuf.Timestamp ts_start = 12;
     */
    tsStart;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundStartRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "game_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "shift_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "shift_round", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "shuffle_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 12, name: "ts_start", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundStartRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundStartRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundStartRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundStartRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundStepsRequest
 */
export class RecordRoundStepsRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 步驟
     *
     * @generated from field: repeated recorder.Step steps = 5;
     */
    steps = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundStepsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "steps", kind: "message", T: Step, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundStepsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundStepsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundStepsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundStepsRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundResultsRequest
 */
export class RecordRoundResultsRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 判讀結果
     *
     * @generated from field: repeated recorder.Result results = 6;
     */
    results = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundResultsRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 6, name: "results", kind: "message", T: Result, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundResultsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundResultsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundResultsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundResultsRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundCancelRequest
 */
export class RecordRoundCancelRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_cancel = 5;
     */
    tsCancel;
    /**
     * 取消代碼
     *
     * @generated from field: string cancel_code = 6;
     */
    cancelCode = "";
    /**
     * 取消備註
     *
     * @generated from field: string cancel_message = 7;
     */
    cancelMessage = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundCancelRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_cancel", kind: "message", T: Timestamp },
        { no: 6, name: "cancel_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "cancel_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundCancelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundCancelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundCancelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundCancelRequest, a, b);
    }
}
/**
 * @generated from message recorder.RecordRoundFinishRequest
 */
export class RecordRoundFinishRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 時間
     *
     * @generated from field: google.protobuf.Timestamp ts_finish = 5;
     */
    tsFinish;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundFinishRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "ts_finish", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundFinishRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundFinishRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundFinishRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundFinishRequest, a, b);
    }
}
/**
 * 紀錄路紙
 *
 * @generated from message recorder.RecordRoadmapRequest
 */
export class RecordRoadmapRequest extends Message {
    /**
     * 班紀錄ID
     *
     * TODO:
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoadmapRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoadmapRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoadmapRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoadmapRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoadmapRequest, a, b);
    }
}
/**
 * 紀錄回放
 *
 * @generated from message recorder.RecordRoundMediaRequest
 */
export class RecordRoundMediaRequest extends Message {
    /**
     * 遊戲局紀錄ID
     *
     * @generated from field: bytes record_id = 1;
     */
    recordId = new Uint8Array(0);
    /**
     * 設定
     *
     * @generated from field: map<string, recorder.URLMedia> set = 2;
     */
    set = {};
    /**
     * 增加
     *
     * @generated from field: repeated recorder.URLMedia add = 3;
     */
    add = [];
    /**
     * 移除
     *
     * @generated from field: repeated string remove = 4;
     */
    remove = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordRoundMediaRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "set", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: URLMedia } },
        { no: 3, name: "add", kind: "message", T: URLMedia, repeated: true },
        { no: 4, name: "remove", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordRoundMediaRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordRoundMediaRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordRoundMediaRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordRoundMediaRequest, a, b);
    }
}
