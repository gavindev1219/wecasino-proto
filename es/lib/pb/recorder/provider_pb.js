// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file recorder/provider.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { RoundRecord, ShuffleRecord } from "./record_pb";
/**
 * @generated from message recorder.RecordQuery
 */
export class RecordQuery extends Message {
    /**
     * 查詢起時
     *
     * @generated from field: google.protobuf.Timestamp ts_from = 1;
     */
    tsFrom;
    /**
     * 查詢終時
     *
     * @generated from field: google.protobuf.Timestamp ts_to = 2;
     */
    tsTo;
    /**
     * 筆數
     *
     * @generated from field: optional int64 limit = 3;
     */
    limit;
    /**
     * 頁面
     *
     * @generated from field: optional int64 page = 4;
     */
    page;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.RecordQuery";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "ts_from", kind: "message", T: Timestamp },
        { no: 2, name: "ts_to", kind: "message", T: Timestamp },
        { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
        { no: 4, name: "page", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new RecordQuery().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RecordQuery().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RecordQuery().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RecordQuery, a, b);
    }
}
/**
 * @generated from message recorder.FetchShuffleRecordRequest
 */
export class FetchShuffleRecordRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: optional bytes record_id = 1;
     */
    recordId;
    /**
     * 遊戲類型
     *
     * @generated from field: optional string game_type = 2;
     */
    gameType;
    /**
     * 遊戲子類型
     *
     * @generated from field: optional string game_subtype = 3;
     */
    gameSubtype;
    /**
     * 桌代碼
     *
     * @generated from field: optional string table_code = 5;
     */
    tableCode;
    /**
     * 洗牌代碼
     *
     * @generated from field: optional string shuffle_code = 6;
     */
    shuffleCode;
    /**
     * 允許的紀錄ID
     *
     * @generated from field: repeated bytes record_ids = 9;
     */
    recordIds = [];
    /**
     * 允許的遊戲類型
     *
     * @generated from field: repeated string game_types = 10;
     */
    gameTypes = [];
    /**
     * 允許的遊戲子類型
     *
     * @generated from field: repeated string game_subtypes = 11;
     */
    gameSubtypes = [];
    /**
     * 允許的桌代碼
     *
     * @generated from field: repeated string table_codes = 13;
     */
    tableCodes = [];
    /**
     * 允許的洗牌代碼
     *
     * @generated from field: repeated string shuffle_codes = 14;
     */
    shuffleCodes = [];
    /**
     * 查詢限制
     *
     * @generated from field: recorder.RecordQuery query = 16;
     */
    query;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchShuffleRecordRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 9, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 10, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 11, name: "game_subtypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 13, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 14, name: "shuffle_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 16, name: "query", kind: "message", T: RecordQuery },
    ]);
    static fromBinary(bytes, options) {
        return new FetchShuffleRecordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchShuffleRecordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchShuffleRecordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchShuffleRecordRequest, a, b);
    }
}
/**
 * @generated from message recorder.FetchShuffleRecordResponse
 */
export class FetchShuffleRecordResponse extends Message {
    /**
     * @generated from field: repeated recorder.ShuffleRecord shuffle_record = 1;
     */
    shuffleRecord = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchShuffleRecordResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "shuffle_record", kind: "message", T: ShuffleRecord, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchShuffleRecordResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchShuffleRecordResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchShuffleRecordResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchShuffleRecordResponse, a, b);
    }
}
/**
 * @generated from message recorder.FetchRoundRecordRequest
 */
export class FetchRoundRecordRequest extends Message {
    /**
     * 紀錄ID
     *
     * @generated from field: optional bytes record_id = 1;
     */
    recordId;
    /**
     * 遊戲類型
     *
     * @generated from field: optional string game_type = 2;
     */
    gameType;
    /**
     * 遊戲子類型
     *
     * @generated from field: optional string game_subtype = 3;
     */
    gameSubtype;
    /**
     * 桌代碼
     *
     * @generated from field: optional string table_code = 5;
     */
    tableCode;
    /**
     * 局代碼
     *
     * @generated from field: optional string round_code = 6;
     */
    roundCode;
    /**
     * 允許的紀錄ID
     *
     * @generated from field: repeated bytes record_ids = 9;
     */
    recordIds = [];
    /**
     * 允許的遊戲類型
     *
     * @generated from field: repeated string game_types = 10;
     */
    gameTypes = [];
    /**
     * 允許的遊戲子類型
     *
     * @generated from field: repeated string game_subtypes = 11;
     */
    gameSubtypes = [];
    /**
     * 允許的桌代碼
     *
     * @generated from field: repeated string table_codes = 13;
     */
    tableCodes = [];
    /**
     * 允許的局代碼
     *
     * @generated from field: repeated string round_codes = 14;
     */
    roundCodes = [];
    /**
     * 查詢限制
     *
     * @generated from field: recorder.RecordQuery query = 16;
     */
    query;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchRoundRecordRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
        { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 9, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
        { no: 10, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 11, name: "game_subtypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 13, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 14, name: "round_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 16, name: "query", kind: "message", T: RecordQuery },
    ]);
    static fromBinary(bytes, options) {
        return new FetchRoundRecordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchRoundRecordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchRoundRecordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchRoundRecordRequest, a, b);
    }
}
/**
 * @generated from message recorder.FetchRoundRecordResponse
 */
export class FetchRoundRecordResponse extends Message {
    /**
     * @generated from field: repeated recorder.RoundRecord round_record = 1;
     */
    roundRecord = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchRoundRecordResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "round_record", kind: "message", T: RoundRecord, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchRoundRecordResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchRoundRecordResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchRoundRecordResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchRoundRecordResponse, a, b);
    }
}
/**
 * 遊戲供應
 *
 * @generated from message recorder.TableProvide
 */
export class TableProvide extends Message {
    /**
     * 遊戲代碼
     *
     * @generated from field: string game_code = 2;
     */
    gameCode = "";
    /**
     * 遊戲類型
     *
     * @generated from field: string game_type = 3;
     */
    gameType = "";
    /**
     * 遊戲子類型
     *
     * @generated from field: string game_subtype = 4;
     */
    gameSubtype = "";
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 5;
     */
    tableCode = "";
    /**
     * 標籤
     *
     * @generated from field: map<string, string> tags = 6;
     */
    tags = {};
    /**
     * 維護中
     *
     * @generated from field: bool maintenance = 7;
     */
    maintenance = false;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.TableProvide";
    static fields = proto3.util.newFieldList(() => [
        { no: 2, name: "game_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 7, name: "maintenance", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new TableProvide().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TableProvide().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TableProvide().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TableProvide, a, b);
    }
}
/**
 * @generated from message recorder.FetchTableProvideListResponse
 */
export class FetchTableProvideListResponse extends Message {
    /**
     * 桌列表
     *
     * @generated from field: repeated recorder.TableProvide table_provides = 1;
     */
    tableProvides = [];
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchTableProvideListResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "table_provides", kind: "message", T: TableProvide, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchTableProvideListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchTableProvideListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchTableProvideListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchTableProvideListResponse, a, b);
    }
}
/**
 * @generated from message recorder.TableStream
 */
export class TableStream extends Message {
    /**
     * url
     *
     * @generated from field: string url = 1;
     */
    url = "";
    /**
     * 類型：hls, flv...
     *
     * @generated from field: string mime = 2;
     */
    mime = "";
    /**
     * 封面截圖
     *
     * @generated from field: string cover_url = 3;
     */
    coverUrl = "";
    /**
     * 封面截圖類型
     *
     * @generated from field: string cover_mime = 4;
     */
    coverMime = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.TableStream";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "cover_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "cover_mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new TableStream().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TableStream().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TableStream().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TableStream, a, b);
    }
}
/**
 * @generated from message recorder.CurrentTable
 */
export class CurrentTable extends Message {
    /**
     * 桌代碼
     *
     * @generated from field: string table_code = 1;
     */
    tableCode = "";
    /**
     * 紀錄
     *
     * @generated from field: optional recorder.RoundRecord round = 2;
     */
    round;
    /**
     * 洗牌
     *
     * @generated from field: optional recorder.ShuffleRecord shuffle = 3;
     */
    shuffle;
    /**
     * 直播網址列表
     *
     * @generated from field: map<string, recorder.TableStream> map_table_stream = 4;
     */
    mapTableStream = {};
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.CurrentTable";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "round", kind: "message", T: RoundRecord, opt: true },
        { no: 3, name: "shuffle", kind: "message", T: ShuffleRecord, opt: true },
        { no: 4, name: "map_table_stream", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: TableStream } },
    ]);
    static fromBinary(bytes, options) {
        return new CurrentTable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CurrentTable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CurrentTable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CurrentTable, a, b);
    }
}
/**
 * @generated from message recorder.FetchCurrentTableRequest
 */
export class FetchCurrentTableRequest extends Message {
    /**
     * 查詢的Table Code
     *
     * @generated from field: repeated string table_codes = 1;
     */
    tableCodes = [];
    /**
     * 返回Shuffle資訊
     *
     * @generated from field: bool shuffle = 2;
     */
    shuffle = false;
    /**
     * 返回直播網址
     *
     * @generated from field: bool stream = 3;
     */
    stream = false;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchCurrentTableRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 2, name: "shuffle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new FetchCurrentTableRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchCurrentTableRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchCurrentTableRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchCurrentTableRequest, a, b);
    }
}
/**
 * @generated from message recorder.FetchCurrentTableResponse
 */
export class FetchCurrentTableResponse extends Message {
    /**
     * Table Code 對應的當下 Current Table
     *
     * @generated from field: map<string, recorder.CurrentTable> map_current_table = 1;
     */
    mapCurrentTable = {};
    /**
     * 時間戳
     *
     * @generated from field: google.protobuf.Timestamp ts = 2;
     */
    ts;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "recorder.FetchCurrentTableResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "map_current_table", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: CurrentTable } },
        { no: 2, name: "ts", kind: "message", T: Timestamp },
    ]);
    static fromBinary(bytes, options) {
        return new FetchCurrentTableResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchCurrentTableResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchCurrentTableResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FetchCurrentTableResponse, a, b);
    }
}
