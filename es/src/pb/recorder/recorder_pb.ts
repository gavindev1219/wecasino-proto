// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file recorder/recorder.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Deck, Result, Step } from "./record_pb";

/**
 * @generated from message recorder.RecordIDResponse
 */
export class RecordIDResponse extends Message<RecordIDResponse> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  constructor(data?: PartialMessage<RecordIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordIDResponse {
    return new RecordIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordIDResponse {
    return new RecordIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordIDResponse {
    return new RecordIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RecordIDResponse | PlainMessage<RecordIDResponse> | undefined, b: RecordIDResponse | PlainMessage<RecordIDResponse> | undefined): boolean {
    return proto3.util.equals(RecordIDResponse, a, b);
  }
}

/**
 * @generated from message recorder.RecordShuffleStartedRequest
 */
export class RecordShuffleStartedRequest extends Message<RecordShuffleStartedRequest> {
  /**
   * 遊戲類型
   *
   * @generated from field: string game_type = 2;
   */
  gameType = "";

  /**
   * 遊戲子類型
   *
   * @generated from field: string game_subtype = 3;
   */
  gameSubtype = "";

  /**
   * 遊戲版本
   *
   * @generated from field: string game_version = 4;
   */
  gameVersion = "";

  /**
   * 桌代碼
   *
   * @generated from field: string table_code = 5;
   */
  tableCode = "";

  /**
   * 洗牌代碼
   *
   * @generated from field: string shuffle_code = 6;
   */
  shuffleCode = "";

  /**
   * 時間
   *
   * @generated from field: google.protobuf.Timestamp ts_start = 7;
   */
  tsStart?: Timestamp;

  constructor(data?: PartialMessage<RecordShuffleStartedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordShuffleStartedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ts_start", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordShuffleStartedRequest {
    return new RecordShuffleStartedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordShuffleStartedRequest {
    return new RecordShuffleStartedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordShuffleStartedRequest {
    return new RecordShuffleStartedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordShuffleStartedRequest | PlainMessage<RecordShuffleStartedRequest> | undefined, b: RecordShuffleStartedRequest | PlainMessage<RecordShuffleStartedRequest> | undefined): boolean {
    return proto3.util.equals(RecordShuffleStartedRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordShuffleDoneRequest
 */
export class RecordShuffleDoneRequest extends Message<RecordShuffleDoneRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  /**
   * 時間
   *
   * @generated from field: google.protobuf.Timestamp ts_done = 5;
   */
  tsDone?: Timestamp;

  /**
   * 使用洗牌代碼
   *
   * @generated from field: string shuffle_code = 6;
   */
  shuffleCode = "";

  /**
   * 洗牌類型
   * key: ResourceTypeCode；value: 牌靴
   *
   * @generated from field: map<int32, recorder.Deck> cards = 7;
   */
  cards: { [key: number]: Deck } = {};

  constructor(data?: PartialMessage<RecordShuffleDoneRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordShuffleDoneRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "ts_done", kind: "message", T: Timestamp },
    { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "cards", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: Deck} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordShuffleDoneRequest {
    return new RecordShuffleDoneRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordShuffleDoneRequest {
    return new RecordShuffleDoneRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordShuffleDoneRequest {
    return new RecordShuffleDoneRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordShuffleDoneRequest | PlainMessage<RecordShuffleDoneRequest> | undefined, b: RecordShuffleDoneRequest | PlainMessage<RecordShuffleDoneRequest> | undefined): boolean {
    return proto3.util.equals(RecordShuffleDoneRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordRoundStartRequest
 */
export class RecordRoundStartRequest extends Message<RecordRoundStartRequest> {
  /**
   * 遊戲類型
   *
   * @generated from field: string game_type = 2;
   */
  gameType = "";

  /**
   * 遊戲子類型
   *
   * @generated from field: string game_subtype = 3;
   */
  gameSubtype = "";

  /**
   * 遊戲版本
   *
   * @generated from field: string game_version = 4;
   */
  gameVersion = "";

  /**
   * 桌代碼
   *
   * @generated from field: string table_code = 5;
   */
  tableCode = "";

  /**
   * 排班代碼
   *
   * @generated from field: string shift_code = 6;
   */
  shiftCode = "";

  /**
   * 此排班局數
   *
   * @generated from field: string shift_round = 7;
   */
  shiftRound = "";

  /**
   * 局代碼
   *
   * @generated from field: string round_code = 8;
   */
  roundCode = "";

  /**
   * 使用洗牌代碼
   *
   * @generated from field: string shuffle_code = 9;
   */
  shuffleCode = "";

  /**
   * 使用此洗牌第幾局，從1開始計算
   *
   * @generated from field: int64 shuffle_round = 10;
   */
  shuffleRound = protoInt64.zero;

  /**
   * 開始時間
   *
   * @generated from field: google.protobuf.Timestamp ts_start = 11;
   */
  tsStart?: Timestamp;

  constructor(data?: PartialMessage<RecordRoundStartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordRoundStartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "game_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shift_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shift_round", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "shuffle_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ts_start", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRoundStartRequest {
    return new RecordRoundStartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRoundStartRequest {
    return new RecordRoundStartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRoundStartRequest {
    return new RecordRoundStartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordRoundStartRequest | PlainMessage<RecordRoundStartRequest> | undefined, b: RecordRoundStartRequest | PlainMessage<RecordRoundStartRequest> | undefined): boolean {
    return proto3.util.equals(RecordRoundStartRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordRoundStepsRequest
 */
export class RecordRoundStepsRequest extends Message<RecordRoundStepsRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  /**
   * 步驟
   *
   * @generated from field: repeated recorder.Step steps = 5;
   */
  steps: Step[] = [];

  constructor(data?: PartialMessage<RecordRoundStepsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordRoundStepsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "steps", kind: "message", T: Step, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRoundStepsRequest {
    return new RecordRoundStepsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRoundStepsRequest {
    return new RecordRoundStepsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRoundStepsRequest {
    return new RecordRoundStepsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordRoundStepsRequest | PlainMessage<RecordRoundStepsRequest> | undefined, b: RecordRoundStepsRequest | PlainMessage<RecordRoundStepsRequest> | undefined): boolean {
    return proto3.util.equals(RecordRoundStepsRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordRoundResultsRequest
 */
export class RecordRoundResultsRequest extends Message<RecordRoundResultsRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  /**
   * 判讀結果
   *
   * @generated from field: repeated recorder.Result results = 6;
   */
  results: Result[] = [];

  constructor(data?: PartialMessage<RecordRoundResultsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordRoundResultsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "results", kind: "message", T: Result, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRoundResultsRequest {
    return new RecordRoundResultsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRoundResultsRequest {
    return new RecordRoundResultsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRoundResultsRequest {
    return new RecordRoundResultsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordRoundResultsRequest | PlainMessage<RecordRoundResultsRequest> | undefined, b: RecordRoundResultsRequest | PlainMessage<RecordRoundResultsRequest> | undefined): boolean {
    return proto3.util.equals(RecordRoundResultsRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordRoundCancelRequest
 */
export class RecordRoundCancelRequest extends Message<RecordRoundCancelRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  /**
   * 時間
   *
   * @generated from field: google.protobuf.Timestamp ts_cancel = 5;
   */
  tsCancel?: Timestamp;

  /**
   * 取消代碼
   *
   * @generated from field: string cancel_code = 6;
   */
  cancelCode = "";

  /**
   * 取消備註
   *
   * @generated from field: string cancel_message = 7;
   */
  cancelMessage = "";

  constructor(data?: PartialMessage<RecordRoundCancelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordRoundCancelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "ts_cancel", kind: "message", T: Timestamp },
    { no: 6, name: "cancel_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "cancel_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRoundCancelRequest {
    return new RecordRoundCancelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRoundCancelRequest {
    return new RecordRoundCancelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRoundCancelRequest {
    return new RecordRoundCancelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordRoundCancelRequest | PlainMessage<RecordRoundCancelRequest> | undefined, b: RecordRoundCancelRequest | PlainMessage<RecordRoundCancelRequest> | undefined): boolean {
    return proto3.util.equals(RecordRoundCancelRequest, a, b);
  }
}

/**
 * @generated from message recorder.RecordRoundFinishRequest
 */
export class RecordRoundFinishRequest extends Message<RecordRoundFinishRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: bytes record_id = 1;
   */
  recordId = new Uint8Array(0);

  /**
   * 時間
   *
   * @generated from field: google.protobuf.Timestamp ts_finish = 5;
   */
  tsFinish?: Timestamp;

  constructor(data?: PartialMessage<RecordRoundFinishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordRoundFinishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "ts_finish", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRoundFinishRequest {
    return new RecordRoundFinishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRoundFinishRequest {
    return new RecordRoundFinishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRoundFinishRequest {
    return new RecordRoundFinishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RecordRoundFinishRequest | PlainMessage<RecordRoundFinishRequest> | undefined, b: RecordRoundFinishRequest | PlainMessage<RecordRoundFinishRequest> | undefined): boolean {
    return proto3.util.equals(RecordRoundFinishRequest, a, b);
  }
}

