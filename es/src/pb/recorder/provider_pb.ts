// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file recorder/provider.proto (package recorder, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { RoundRecord, ShuffleRecord } from "./record_pb";

/**
 * @generated from message recorder.RecordQuery
 */
export class RecordQuery extends Message<RecordQuery> {
  /**
   * 查詢起時
   *
   * @generated from field: google.protobuf.Timestamp ts_from = 1;
   */
  tsFrom?: Timestamp;

  /**
   * 查詢終時
   *
   * @generated from field: google.protobuf.Timestamp ts_to = 2;
   */
  tsTo?: Timestamp;

  /**
   * 筆數
   *
   * @generated from field: optional int64 limit = 3;
   */
  limit?: bigint;

  /**
   * 頁面
   *
   * @generated from field: optional int64 page = 4;
   */
  page?: bigint;

  constructor(data?: PartialMessage<RecordQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.RecordQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts_from", kind: "message", T: Timestamp },
    { no: 2, name: "ts_to", kind: "message", T: Timestamp },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "page", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordQuery {
    return new RecordQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordQuery {
    return new RecordQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordQuery {
    return new RecordQuery().fromJsonString(jsonString, options);
  }

  static equals(a: RecordQuery | PlainMessage<RecordQuery> | undefined, b: RecordQuery | PlainMessage<RecordQuery> | undefined): boolean {
    return proto3.util.equals(RecordQuery, a, b);
  }
}

/**
 * @generated from message recorder.FetchShuffleRecordRequest
 */
export class FetchShuffleRecordRequest extends Message<FetchShuffleRecordRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: optional bytes record_id = 1;
   */
  recordId?: Uint8Array;

  /**
   * 遊戲類型
   *
   * @generated from field: optional string game_type = 2;
   */
  gameType?: string;

  /**
   * 遊戲子類型
   *
   * @generated from field: optional string game_subtype = 3;
   */
  gameSubtype?: string;

  /**
   * 桌代碼
   *
   * @generated from field: optional string table_code = 5;
   */
  tableCode?: string;

  /**
   * 洗牌代碼
   *
   * @generated from field: optional string shuffle_code = 6;
   */
  shuffleCode?: string;

  /**
   * 允許的紀錄ID
   *
   * @generated from field: repeated bytes record_ids = 9;
   */
  recordIds: Uint8Array[] = [];

  /**
   * 允許的遊戲類型
   *
   * @generated from field: repeated string game_types = 10;
   */
  gameTypes: string[] = [];

  /**
   * 允許的遊戲子類型
   *
   * @generated from field: repeated string game_subtypes = 11;
   */
  gameSubtypes: string[] = [];

  /**
   * 允許的桌代碼
   *
   * @generated from field: repeated string table_codes = 13;
   */
  tableCodes: string[] = [];

  /**
   * 允許的洗牌代碼
   *
   * @generated from field: repeated string shuffle_codes = 14;
   */
  shuffleCodes: string[] = [];

  /**
   * 查詢限制
   *
   * @generated from field: recorder.RecordQuery query = 16;
   */
  query?: RecordQuery;

  constructor(data?: PartialMessage<FetchShuffleRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchShuffleRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "shuffle_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 10, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "game_subtypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "shuffle_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "query", kind: "message", T: RecordQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchShuffleRecordRequest {
    return new FetchShuffleRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchShuffleRecordRequest {
    return new FetchShuffleRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchShuffleRecordRequest {
    return new FetchShuffleRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchShuffleRecordRequest | PlainMessage<FetchShuffleRecordRequest> | undefined, b: FetchShuffleRecordRequest | PlainMessage<FetchShuffleRecordRequest> | undefined): boolean {
    return proto3.util.equals(FetchShuffleRecordRequest, a, b);
  }
}

/**
 * @generated from message recorder.FetchShuffleRecordResponse
 */
export class FetchShuffleRecordResponse extends Message<FetchShuffleRecordResponse> {
  /**
   * @generated from field: repeated recorder.ShuffleRecord shuffle_record = 1;
   */
  shuffleRecord: ShuffleRecord[] = [];

  constructor(data?: PartialMessage<FetchShuffleRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchShuffleRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shuffle_record", kind: "message", T: ShuffleRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchShuffleRecordResponse {
    return new FetchShuffleRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchShuffleRecordResponse {
    return new FetchShuffleRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchShuffleRecordResponse {
    return new FetchShuffleRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchShuffleRecordResponse | PlainMessage<FetchShuffleRecordResponse> | undefined, b: FetchShuffleRecordResponse | PlainMessage<FetchShuffleRecordResponse> | undefined): boolean {
    return proto3.util.equals(FetchShuffleRecordResponse, a, b);
  }
}

/**
 * @generated from message recorder.FetchRoundRecordRequest
 */
export class FetchRoundRecordRequest extends Message<FetchRoundRecordRequest> {
  /**
   * 紀錄ID
   *
   * @generated from field: optional bytes record_id = 1;
   */
  recordId?: Uint8Array;

  /**
   * 遊戲類型
   *
   * @generated from field: optional string game_type = 2;
   */
  gameType?: string;

  /**
   * 遊戲子類型
   *
   * @generated from field: optional string game_subtype = 3;
   */
  gameSubtype?: string;

  /**
   * 桌代碼
   *
   * @generated from field: optional string table_code = 5;
   */
  tableCode?: string;

  /**
   * 局代碼
   *
   * @generated from field: optional string round_code = 6;
   */
  roundCode?: string;

  /**
   * 允許的紀錄ID
   *
   * @generated from field: repeated bytes record_ids = 9;
   */
  recordIds: Uint8Array[] = [];

  /**
   * 允許的遊戲類型
   *
   * @generated from field: repeated string game_types = 10;
   */
  gameTypes: string[] = [];

  /**
   * 允許的遊戲子類型
   *
   * @generated from field: repeated string game_subtypes = 11;
   */
  gameSubtypes: string[] = [];

  /**
   * 允許的桌代碼
   *
   * @generated from field: repeated string table_codes = 13;
   */
  tableCodes: string[] = [];

  /**
   * 允許的局代碼
   *
   * @generated from field: repeated string round_codes = 14;
   */
  roundCodes: string[] = [];

  /**
   * 查詢限制
   *
   * @generated from field: recorder.RecordQuery query = 16;
   */
  query?: RecordQuery;

  constructor(data?: PartialMessage<FetchRoundRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchRoundRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record_id", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 2, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "round_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "record_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 10, name: "game_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "game_subtypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "round_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "query", kind: "message", T: RecordQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRoundRecordRequest {
    return new FetchRoundRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRoundRecordRequest {
    return new FetchRoundRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRoundRecordRequest {
    return new FetchRoundRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchRoundRecordRequest | PlainMessage<FetchRoundRecordRequest> | undefined, b: FetchRoundRecordRequest | PlainMessage<FetchRoundRecordRequest> | undefined): boolean {
    return proto3.util.equals(FetchRoundRecordRequest, a, b);
  }
}

/**
 * @generated from message recorder.FetchRoundRecordResponse
 */
export class FetchRoundRecordResponse extends Message<FetchRoundRecordResponse> {
  /**
   * @generated from field: repeated recorder.RoundRecord round_record = 1;
   */
  roundRecord: RoundRecord[] = [];

  constructor(data?: PartialMessage<FetchRoundRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchRoundRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "round_record", kind: "message", T: RoundRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRoundRecordResponse {
    return new FetchRoundRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRoundRecordResponse {
    return new FetchRoundRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRoundRecordResponse {
    return new FetchRoundRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchRoundRecordResponse | PlainMessage<FetchRoundRecordResponse> | undefined, b: FetchRoundRecordResponse | PlainMessage<FetchRoundRecordResponse> | undefined): boolean {
    return proto3.util.equals(FetchRoundRecordResponse, a, b);
  }
}

/**
 * 遊戲供應
 *
 * @generated from message recorder.TableProvide
 */
export class TableProvide extends Message<TableProvide> {
  /**
   * 遊戲代碼
   *
   * @generated from field: string game_code = 2;
   */
  gameCode = "";

  /**
   * 遊戲類型
   *
   * @generated from field: string game_type = 3;
   */
  gameType = "";

  /**
   * 遊戲子類型
   *
   * @generated from field: string game_subtype = 4;
   */
  gameSubtype = "";

  /**
   * 桌代碼
   *
   * @generated from field: string table_code = 5;
   */
  tableCode = "";

  /**
   * 標籤
   *
   * @generated from field: map<string, string> tags = 6;
   */
  tags: { [key: string]: string } = {};

  /**
   * 維護中
   *
   * @generated from field: bool maintenance = 7;
   */
  maintenance = false;

  constructor(data?: PartialMessage<TableProvide>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.TableProvide";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "game_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "game_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "game_subtype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "maintenance", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableProvide {
    return new TableProvide().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableProvide {
    return new TableProvide().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableProvide {
    return new TableProvide().fromJsonString(jsonString, options);
  }

  static equals(a: TableProvide | PlainMessage<TableProvide> | undefined, b: TableProvide | PlainMessage<TableProvide> | undefined): boolean {
    return proto3.util.equals(TableProvide, a, b);
  }
}

/**
 * @generated from message recorder.FetchTableProvideListResponse
 */
export class FetchTableProvideListResponse extends Message<FetchTableProvideListResponse> {
  /**
   * 桌列表
   *
   * @generated from field: repeated recorder.TableProvide table_provides = 1;
   */
  tableProvides: TableProvide[] = [];

  constructor(data?: PartialMessage<FetchTableProvideListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchTableProvideListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_provides", kind: "message", T: TableProvide, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchTableProvideListResponse {
    return new FetchTableProvideListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchTableProvideListResponse {
    return new FetchTableProvideListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchTableProvideListResponse {
    return new FetchTableProvideListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchTableProvideListResponse | PlainMessage<FetchTableProvideListResponse> | undefined, b: FetchTableProvideListResponse | PlainMessage<FetchTableProvideListResponse> | undefined): boolean {
    return proto3.util.equals(FetchTableProvideListResponse, a, b);
  }
}

/**
 * @generated from message recorder.TableStream
 */
export class TableStream extends Message<TableStream> {
  /**
   * url
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * 類型：hls, flv...
   *
   * @generated from field: string mime = 2;
   */
  mime = "";

  /**
   * 封面截圖
   *
   * @generated from field: string cover_url = 3;
   */
  coverUrl = "";

  /**
   * 封面截圖類型
   *
   * @generated from field: string cover_mime = 4;
   */
  coverMime = "";

  constructor(data?: PartialMessage<TableStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.TableStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cover_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cover_mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableStream {
    return new TableStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableStream {
    return new TableStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableStream {
    return new TableStream().fromJsonString(jsonString, options);
  }

  static equals(a: TableStream | PlainMessage<TableStream> | undefined, b: TableStream | PlainMessage<TableStream> | undefined): boolean {
    return proto3.util.equals(TableStream, a, b);
  }
}

/**
 * @generated from message recorder.CurrentTable
 */
export class CurrentTable extends Message<CurrentTable> {
  /**
   * 桌代碼
   *
   * @generated from field: string table_code = 1;
   */
  tableCode = "";

  /**
   * 紀錄
   *
   * @generated from field: optional recorder.RoundRecord round = 2;
   */
  round?: RoundRecord;

  /**
   * 洗牌
   *
   * @generated from field: optional recorder.ShuffleRecord shuffle = 3;
   */
  shuffle?: ShuffleRecord;

  /**
   * 直播網址列表
   *
   * @generated from field: map<string, recorder.TableStream> map_table_stream = 4;
   */
  mapTableStream: { [key: string]: TableStream } = {};

  constructor(data?: PartialMessage<CurrentTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.CurrentTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "round", kind: "message", T: RoundRecord, opt: true },
    { no: 3, name: "shuffle", kind: "message", T: ShuffleRecord, opt: true },
    { no: 4, name: "map_table_stream", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TableStream} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentTable {
    return new CurrentTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentTable {
    return new CurrentTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentTable {
    return new CurrentTable().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentTable | PlainMessage<CurrentTable> | undefined, b: CurrentTable | PlainMessage<CurrentTable> | undefined): boolean {
    return proto3.util.equals(CurrentTable, a, b);
  }
}

/**
 * @generated from message recorder.FetchCurrentTableRequest
 */
export class FetchCurrentTableRequest extends Message<FetchCurrentTableRequest> {
  /**
   * 查詢的Table Code
   *
   * @generated from field: repeated string table_codes = 1;
   */
  tableCodes: string[] = [];

  /**
   * 返回Shuffle資訊
   *
   * @generated from field: bool shuffle = 2;
   */
  shuffle = false;

  /**
   * 返回直播網址
   *
   * @generated from field: bool stream = 3;
   */
  stream = false;

  constructor(data?: PartialMessage<FetchCurrentTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchCurrentTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "shuffle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchCurrentTableRequest {
    return new FetchCurrentTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchCurrentTableRequest {
    return new FetchCurrentTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchCurrentTableRequest {
    return new FetchCurrentTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchCurrentTableRequest | PlainMessage<FetchCurrentTableRequest> | undefined, b: FetchCurrentTableRequest | PlainMessage<FetchCurrentTableRequest> | undefined): boolean {
    return proto3.util.equals(FetchCurrentTableRequest, a, b);
  }
}

/**
 * @generated from message recorder.FetchCurrentTableResponse
 */
export class FetchCurrentTableResponse extends Message<FetchCurrentTableResponse> {
  /**
   * Table Code 對應的當下 Current Table
   *
   * @generated from field: map<string, recorder.CurrentTable> map_current_table = 1;
   */
  mapCurrentTable: { [key: string]: CurrentTable } = {};

  /**
   * 時間戳
   *
   * @generated from field: google.protobuf.Timestamp ts = 2;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<FetchCurrentTableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "recorder.FetchCurrentTableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "map_current_table", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CurrentTable} },
    { no: 2, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchCurrentTableResponse {
    return new FetchCurrentTableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchCurrentTableResponse {
    return new FetchCurrentTableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchCurrentTableResponse {
    return new FetchCurrentTableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchCurrentTableResponse | PlainMessage<FetchCurrentTableResponse> | undefined, b: FetchCurrentTableResponse | PlainMessage<FetchCurrentTableResponse> | undefined): boolean {
    return proto3.util.equals(FetchCurrentTableResponse, a, b);
  }
}

