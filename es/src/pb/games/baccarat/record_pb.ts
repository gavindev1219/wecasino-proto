// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file games/baccarat/record.proto (package games.baccarat, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum games.baccarat.ResourceType
 */
export enum ResourceType {
  /**
   * 未指定
   *
   * @generated from enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
   */
  RESOURCE_TYPE_UNSPECIFIED = 0,

  /**
   * 牌靴
   *
   * @generated from enum value: SHOE = 1;
   */
  SHOE = 1,

  /**
   * 例牌
   *
   * @generated from enum value: NORMAL = 2;
   */
  NORMAL = 2,

  /**
   * 非例牌
   *
   * @generated from enum value: EXTRA = 3;
   */
  EXTRA = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceType)
proto3.util.setEnumType(ResourceType, "games.baccarat.ResourceType", [
  { no: 0, name: "RESOURCE_TYPE_UNSPECIFIED" },
  { no: 1, name: "SHOE" },
  { no: 2, name: "NORMAL" },
  { no: 3, name: "EXTRA" },
]);

/**
 * 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
 *
 * @generated from enum games.baccarat.Step
 */
export enum Step {
  /**
   * 未指定
   *
   * @generated from enum value: STEP_UNSPECIFIED = 0;
   */
  STEP_UNSPECIFIED = 0,

  /**
   * 本局開始
   *
   * @generated from enum value: ROUND_START = 1;
   */
  ROUND_START = 1,

  /**
   * 本局完成
   *
   * @generated from enum value: ROUND_FINISHED = 2;
   */
  ROUND_FINISHED = 2,

  /**
   * 本局取消
   *
   * @generated from enum value: ROUND_CANCELED = 3;
   */
  ROUND_CANCELED = 3,

  /**
   * 派發閒家例牌1
   *
   * @generated from enum value: DEAL_PLAYER_1 = 4;
   */
  DEAL_PLAYER_1 = 4,

  /**
   * 派發莊家例牌1
   *
   * @generated from enum value: DEAL_BANKER_1 = 5;
   */
  DEAL_BANKER_1 = 5,

  /**
   * 派發閒家例牌2
   *
   * @generated from enum value: DEAL_PLAYER_2 = 6;
   */
  DEAL_PLAYER_2 = 6,

  /**
   * 派發莊家例牌2
   *
   * @generated from enum value: DEAL_BANKER_2 = 7;
   */
  DEAL_BANKER_2 = 7,

  /**
   * 開放下注
   *
   * @generated from enum value: OPEN_FOR_BETTING = 8;
   */
  OPEN_FOR_BETTING = 8,

  /**
   * 停止下注
   *
   * @generated from enum value: CLOSE_THE_BETTING = 9;
   */
  CLOSE_THE_BETTING = 9,

  /**
   * 非瞇牌開例牌
   *
   * @generated from enum value: SHOW_NORMAL = 12;
   */
  SHOW_NORMAL = 12,

  /**
   * 瞇牌例牌
   *
   * @generated from enum value: PEEK_NORMAL = 13;
   */
  PEEK_NORMAL = 13,

  /**
   * 瞇牌公布例牌
   *
   * @generated from enum value: PEEK_SHOW_NORMAL = 14;
   */
  PEEK_SHOW_NORMAL = 14,

  /**
   * 非瞇牌補閒家牌
   *
   * @generated from enum value: DEAL_PLAYER_EXTRA = 16;
   */
  DEAL_PLAYER_EXTRA = 16,

  /**
   * 瞇牌閒家補牌
   *
   * @generated from enum value: PEEK_DEAL_PLAYER_EXTRA = 17;
   */
  PEEK_DEAL_PLAYER_EXTRA = 17,

  /**
   * 瞇牌公布閒家補牌
   *
   * @generated from enum value: PEEK_SHOW_PLAYER_EXTRA = 18;
   */
  PEEK_SHOW_PLAYER_EXTRA = 18,

  /**
   * 非瞇牌補莊家牌
   *
   * @generated from enum value: DEAL_BANKER_EXTRA = 20;
   */
  DEAL_BANKER_EXTRA = 20,

  /**
   * 瞇牌莊家補牌
   *
   * @generated from enum value: PEEK_DEAL_BANKER_EXTRA = 21;
   */
  PEEK_DEAL_BANKER_EXTRA = 21,

  /**
   * 瞇牌公布莊家補牌
   *
   * @generated from enum value: PEEK_SHOW_BANKER_EXTRA = 22;
   */
  PEEK_SHOW_BANKER_EXTRA = 22,

  /**
   * PITBOSS 修改派發例牌
   *
   * @generated from enum value: PITBOSS_MODIFY_NORMAL = 24;
   */
  PITBOSS_MODIFY_NORMAL = 24,

  /**
   * PITBOSS 修改派發閒家補牌
   *
   * @generated from enum value: PITBOSS_MODIFY_PLAYER_EXTRA = 25;
   */
  PITBOSS_MODIFY_PLAYER_EXTRA = 25,

  /**
   * PITBOSS 修改派發莊家補牌
   *
   * @generated from enum value: PITBOSS_MODIFY_BANKER_EXTRA = 26;
   */
  PITBOSS_MODIFY_BANKER_EXTRA = 26,
}
// Retrieve enum metadata with: proto3.getEnumType(Step)
proto3.util.setEnumType(Step, "games.baccarat.Step", [
  { no: 0, name: "STEP_UNSPECIFIED" },
  { no: 1, name: "ROUND_START" },
  { no: 2, name: "ROUND_FINISHED" },
  { no: 3, name: "ROUND_CANCELED" },
  { no: 4, name: "DEAL_PLAYER_1" },
  { no: 5, name: "DEAL_BANKER_1" },
  { no: 6, name: "DEAL_PLAYER_2" },
  { no: 7, name: "DEAL_BANKER_2" },
  { no: 8, name: "OPEN_FOR_BETTING" },
  { no: 9, name: "CLOSE_THE_BETTING" },
  { no: 12, name: "SHOW_NORMAL" },
  { no: 13, name: "PEEK_NORMAL" },
  { no: 14, name: "PEEK_SHOW_NORMAL" },
  { no: 16, name: "DEAL_PLAYER_EXTRA" },
  { no: 17, name: "PEEK_DEAL_PLAYER_EXTRA" },
  { no: 18, name: "PEEK_SHOW_PLAYER_EXTRA" },
  { no: 20, name: "DEAL_BANKER_EXTRA" },
  { no: 21, name: "PEEK_DEAL_BANKER_EXTRA" },
  { no: 22, name: "PEEK_SHOW_BANKER_EXTRA" },
  { no: 24, name: "PITBOSS_MODIFY_NORMAL" },
  { no: 25, name: "PITBOSS_MODIFY_PLAYER_EXTRA" },
  { no: 26, name: "PITBOSS_MODIFY_BANKER_EXTRA" },
]);

/**
 * 座位功能代碼
 *
 * @generated from enum games.baccarat.Seat
 */
export enum Seat {
  /**
   * 未指定
   *
   * @generated from enum value: SEAT_UNSPECIFIED = 0;
   */
  SEAT_UNSPECIFIED = 0,

  /**
   * Dealer 
   *
   * @generated from enum value: DEALER = 1;
   */
  DEALER = 1,

  /**
   * 閒家
   *
   * @generated from enum value: PLAYER = 2;
   */
  PLAYER = 2,

  /**
   * 莊家
   *
   * @generated from enum value: BANKER = 3;
   */
  BANKER = 3,

  /**
   * Pitboss
   *
   * @generated from enum value: PITBOSS = 9;
   */
  PITBOSS = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(Seat)
proto3.util.setEnumType(Seat, "games.baccarat.Seat", [
  { no: 0, name: "SEAT_UNSPECIFIED" },
  { no: 1, name: "DEALER" },
  { no: 2, name: "PLAYER" },
  { no: 3, name: "BANKER" },
  { no: 9, name: "PITBOSS" },
]);

/**
 * 結果紀錄類型代碼
 *
 * @generated from enum games.baccarat.ResultRecordType
 */
export enum ResultRecordType {
  /**
   * 未指定
   *
   * @generated from enum value: RESULT_RECORD_TYPE_UNSPECIFIED = 0;
   */
  RESULT_RECORD_TYPE_UNSPECIFIED = 0,

  /**
   * 遊戲局結束
   *
   * @generated from enum value: ROUND_FINISH = 1;
   */
  ROUND_FINISH = 1,

  /**
   * Pitboss 修正
   *
   * @generated from enum value: PITBOSS_MODIFY_RESULT = 2;
   */
  PITBOSS_MODIFY_RESULT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResultRecordType)
proto3.util.setEnumType(ResultRecordType, "games.baccarat.ResultRecordType", [
  { no: 0, name: "RESULT_RECORD_TYPE_UNSPECIFIED" },
  { no: 1, name: "ROUND_FINISH" },
  { no: 2, name: "PITBOSS_MODIFY_RESULT" },
]);

/**
 * 取消原因
 *
 * @generated from enum games.baccarat.CancelReason
 */
export enum CancelReason {
  /**
   * 未指定，沒有取消
   *
   * @generated from enum value: CANCEL_REASON_UNSPECIFIED = 0;
   */
  CANCEL_REASON_UNSPECIFIED = 0,

  /**
   * 取消說明原因
   *
   * @generated from enum value: NO_REASON = 1;
   */
  NO_REASON = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CancelReason)
proto3.util.setEnumType(CancelReason, "games.baccarat.CancelReason", [
  { no: 0, name: "CANCEL_REASON_UNSPECIFIED" },
  { no: 1, name: "NO_REASON" },
]);

/**
 * *
 * The state of the game flow
 *
 * @generated from enum games.baccarat.GameState
 */
export enum GameState {
  /**
   * Idle
   *
   * @generated from enum value: STATE_IDLE = 0;
   */
  STATE_IDLE = 0,

  /**
   * Game Starting
   *
   * @generated from enum value: STATE_START = 1;
   */
  STATE_START = 1,

  /**
   * Counuter Started
   *
   * @generated from enum value: STATE_COUNTER_START = 2;
   */
  STATE_COUNTER_START = 2,

  /**
   * Scan the banker card
   *
   * @generated from enum value: STATE_BANKER = 3;
   */
  STATE_BANKER = 3,

  /**
   * Scan the player card
   *
   * @generated from enum value: STATE_PLAYER = 4;
   */
  STATE_PLAYER = 4,

  /**
   * Scan the banker extra card
   *
   * @generated from enum value: STATE_BANKER_EXTRA = 5;
   */
  STATE_BANKER_EXTRA = 5,

  /**
   * Scan the player extra card
   *
   * @generated from enum value: STATE_PLAYER_EXTRA = 6;
   */
  STATE_PLAYER_EXTRA = 6,

  /**
   * Game Ended
   *
   * @generated from enum value: STATE_END = 7;
   */
  STATE_END = 7,

  /**
   * Game Ended
   *
   * @generated from enum value: STATE_CONFIRM = 8;
   */
  STATE_CONFIRM = 8,

  /**
   * When me for banker and card
   *
   * @generated from enum value: STATE_PEEK = 20;
   */
  STATE_PEEK = 20,

  /**
   * When me for banker extra card
   *
   * @generated from enum value: STATE_PEEK_BANKER = 22;
   */
  STATE_PEEK_BANKER = 22,

  /**
   * When me for player extra card
   *
   * @generated from enum value: STATE_PEEK_PLAYER = 24;
   */
  STATE_PEEK_PLAYER = 24,

  /**
   * Shuffle cards
   *
   * @generated from enum value: STATE_SHUFFLE = 30;
   */
  STATE_SHUFFLE = 30,
}
// Retrieve enum metadata with: proto3.getEnumType(GameState)
proto3.util.setEnumType(GameState, "games.baccarat.GameState", [
  { no: 0, name: "STATE_IDLE" },
  { no: 1, name: "STATE_START" },
  { no: 2, name: "STATE_COUNTER_START" },
  { no: 3, name: "STATE_BANKER" },
  { no: 4, name: "STATE_PLAYER" },
  { no: 5, name: "STATE_BANKER_EXTRA" },
  { no: 6, name: "STATE_PLAYER_EXTRA" },
  { no: 7, name: "STATE_END" },
  { no: 8, name: "STATE_CONFIRM" },
  { no: 20, name: "STATE_PEEK" },
  { no: 22, name: "STATE_PEEK_BANKER" },
  { no: 24, name: "STATE_PEEK_PLAYER" },
  { no: 30, name: "STATE_SHUFFLE" },
]);

/**
 * @generated from enum games.baccarat.WinType
 */
export enum WinType {
  /**
   * @generated from enum value: NULL = 0;
   */
  NULL = 0,

  /**
   * @generated from enum value: WINBANKER = 1;
   */
  WINBANKER = 1,

  /**
   * @generated from enum value: WINPLAYER = 2;
   */
  WINPLAYER = 2,

  /**
   * @generated from enum value: TIE = 3;
   */
  TIE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(WinType)
proto3.util.setEnumType(WinType, "games.baccarat.WinType", [
  { no: 0, name: "NULL" },
  { no: 1, name: "WINBANKER" },
  { no: 2, name: "WINPLAYER" },
  { no: 3, name: "TIE" },
]);

/**
 * *
 * The status fo the current game.
 *
 * @generated from message games.baccarat.GameStatus
 */
export class GameStatus extends Message<GameStatus> {
  /**
   * Unique tableid
   *
   * @generated from field: string sessionID = 1;
   */
  sessionID = "";

  /**
   * Unique session for the game
   *
   * @generated from field: string gameRoundID = 2;
   */
  gameRoundID = "";

  /**
   * Unique tableid
   *
   * @generated from field: string tableID = 3;
   */
  tableID = "";

  /**
   * State of the game
   *
   * @generated from field: games.baccarat.GameState state = 4;
   */
  state = GameState.STATE_IDLE;

  /**
   * Time when game start
   *
   * @generated from field: int64 startTime = 5;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int32 shoe = 6;
   */
  shoe = 0;

  /**
   * @generated from field: int32 round = 7;
   */
  round = 0;

  /**
   * game specify information
   *
   * Card slot Banker 1
   *
   * @generated from field: string a1 = 10;
   */
  a1 = "";

  /**
   * Card slot Banker 2
   *
   * @generated from field: string a2 = 11;
   */
  a2 = "";

  /**
   * Card slot Banker 3
   *
   * @generated from field: string a3 = 12;
   */
  a3 = "";

  /**
   * Card slot Player 1
   *
   * @generated from field: string b1 = 13;
   */
  b1 = "";

  /**
   * Card slot Player 2
   *
   * @generated from field: string b2 = 14;
   */
  b2 = "";

  /**
   * Card slot Player 3
   *
   * @generated from field: string b3 = 15;
   */
  b3 = "";

  /**
   * Result of banker
   *
   * @generated from field: bool wina = 16;
   */
  wina = false;

  /**
   * Result of player
   *
   * @generated from field: bool winb = 17;
   */
  winb = false;

  /**
   * Coundown value
   *
   * @generated from field: int32 countdown = 18;
   */
  countdown = 0;

  /**
   * Shoe ID
   *
   * @generated from field: string shoeID = 19;
   */
  shoeID = "";

  /**
   * Player Point
   *
   * @generated from field: int32 playerPoint = 20;
   */
  playerPoint = 0;

  /**
   * Banker Point
   *
   * @generated from field: int32 bankerPoint = 21;
   */
  bankerPoint = 0;

  /**
   * WinType
   *
   * @generated from field: int32 winType = 22;
   */
  winType = 0;

  /**
   * bv
   *
   * @generated from field: int32 bv = 23;
   */
  bv = 0;

  /**
   * pv
   *
   * @generated from field: int32 pv = 24;
   */
  pv = 0;

  /**
   * bp
   *
   * @generated from field: bool bp = 25;
   */
  bp = false;

  /**
   * pp
   *
   * @generated from field: bool pp = 26;
   */
  pp = false;

  /**
   * Player Point
   *
   * @generated from field: bool playerExtraCard = 30;
   */
  playerExtraCard = false;

  /**
   * Banker Point
   *
   * @generated from field: bool bankerExtraCard = 31;
   */
  bankerExtraCard = false;

  /**
   * Time when peek card
   *
   * @generated from field: int64 peekcardtime = 32;
   */
  peekcardtime = protoInt64.zero;

  /**
   * SuperSix -1=unknown 0=false 1=true
   *
   * @generated from field: int32 isSuperSix = 40;
   */
  isSuperSix = 0;

  /**
   * Banker Pair -1=unknown 0=false 1=true
   *
   * @generated from field: int32 isBankerPair = 41;
   */
  isBankerPair = 0;

  /**
   * Player Pair-1=unknown 0=false 1=true
   *
   * @generated from field: int32 isPlayerPair = 42;
   */
  isPlayerPair = 0;

  /**
   * @generated from field: bool redcard = 90;
   */
  redcard = false;

  /**
   * Coundown value for me first batch of card
   *
   * @generated from field: int32 countdownA = 101;
   */
  countdownA = 0;

  /**
   * Coundown value for me extra card
   *
   * @generated from field: int32 countdownB = 102;
   */
  countdownB = 0;

  /**
   * masked cards sn slice for blockchan
   *
   * @generated from field: repeated string maskedCardsSN = 103;
   */
  maskedCardsSN: string[] = [];

  /**
   * sha256 cards from masked cards sn
   *
   * @generated from field: repeated string hashedCards = 104;
   */
  hashedCards: string[] = [];

  /**
   * show first card boolean when new shoe
   *
   * @generated from field: bool showFirstCard = 105;
   */
  showFirstCard = false;

  /**
   * first card of the shoe
   *
   * @generated from field: string firstCard = 106;
   */
  firstCard = "";

  /**
   * next card to show (i.e. first maskedCardsSN haven't been shown's index)
   *
   * @generated from field: int32 currentCardIndex = 107;
   */
  currentCardIndex = 0;

  /**
   * the red card index of the shoe
   *
   * @generated from field: int32 redCardIndex = 108;
   */
  redCardIndex = 0;

  /**
   * cosmos blockchain id for the shoe
   *
   * @generated from field: string cosmosShoeID = 109;
   */
  cosmosShoeID = "";

  /**
   * length of hashedCards
   *
   * @generated from field: int32 hashedLength = 110;
   */
  hashedLength = 0;

  /**
   * Lucky Number and payout ratio
   *
   * @generated from field: map<string, int32> lucky = 111;
   */
  lucky: { [key: string]: number } = {};

  /**
   * 0: barcode 1:image recognition
   *
   * @generated from field: map<string, int32> scannerType = 112;
   */
  scannerType: { [key: string]: number } = {};

  constructor(data?: PartialMessage<GameStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "games.baccarat.GameStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameRoundID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tableID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(GameState) },
    { no: 5, name: "startTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "shoe", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "a1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "a2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "a3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "b1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "b2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "b3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "wina", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "winb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "countdown", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "shoeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "playerPoint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 21, name: "bankerPoint", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 22, name: "winType", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 23, name: "bv", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "pv", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 25, name: "bp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "pp", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "playerExtraCard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 31, name: "bankerExtraCard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 32, name: "peekcardtime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 40, name: "isSuperSix", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 41, name: "isBankerPair", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 42, name: "isPlayerPair", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 90, name: "redcard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 101, name: "countdownA", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 102, name: "countdownB", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 103, name: "maskedCardsSN", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 104, name: "hashedCards", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 105, name: "showFirstCard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 106, name: "firstCard", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 107, name: "currentCardIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 108, name: "redCardIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 109, name: "cosmosShoeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 110, name: "hashedLength", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 111, name: "lucky", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 112, name: "scannerType", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameStatus {
    return new GameStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameStatus {
    return new GameStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameStatus {
    return new GameStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GameStatus | PlainMessage<GameStatus> | undefined, b: GameStatus | PlainMessage<GameStatus> | undefined): boolean {
    return proto3.util.equals(GameStatus, a, b);
  }
}

