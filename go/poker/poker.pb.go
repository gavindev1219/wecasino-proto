// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: poker/poker.proto

package poker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 撲克牌代碼
type PokerCardCode int32

const (
	// 未指定
	PokerCardCode_POKER_CARD_CODE_UNSPECIFIED PokerCardCode = 0
	// 未指定花色
	PokerCardCode_POKER_CARD_CODE_ANY_A  PokerCardCode = 1
	PokerCardCode_POKER_CARD_CODE_ANY_2  PokerCardCode = 2
	PokerCardCode_POKER_CARD_CODE_ANY_3  PokerCardCode = 3
	PokerCardCode_POKER_CARD_CODE_ANY_4  PokerCardCode = 4
	PokerCardCode_POKER_CARD_CODE_ANY_5  PokerCardCode = 5
	PokerCardCode_POKER_CARD_CODE_ANY_6  PokerCardCode = 6
	PokerCardCode_POKER_CARD_CODE_ANY_7  PokerCardCode = 7
	PokerCardCode_POKER_CARD_CODE_ANY_8  PokerCardCode = 8
	PokerCardCode_POKER_CARD_CODE_ANY_9  PokerCardCode = 9
	PokerCardCode_POKER_CARD_CODE_ANY_10 PokerCardCode = 10
	PokerCardCode_POKER_CARD_CODE_ANY_J  PokerCardCode = 11
	PokerCardCode_POKER_CARD_CODE_ANY_Q  PokerCardCode = 12
	PokerCardCode_POKER_CARD_CODE_ANY_K  PokerCardCode = 13
	// 黑桃
	PokerCardCode_POKER_CARD_CODE_SPADE_ANY PokerCardCode = 16
	PokerCardCode_POKER_CARD_CODE_SPADE_A   PokerCardCode = 17
	PokerCardCode_POKER_CARD_CODE_SPADE_2   PokerCardCode = 18
	PokerCardCode_POKER_CARD_CODE_SPADE_3   PokerCardCode = 19
	PokerCardCode_POKER_CARD_CODE_SPADE_4   PokerCardCode = 20
	PokerCardCode_POKER_CARD_CODE_SPADE_5   PokerCardCode = 21
	PokerCardCode_POKER_CARD_CODE_SPADE_6   PokerCardCode = 22
	PokerCardCode_POKER_CARD_CODE_SPADE_7   PokerCardCode = 23
	PokerCardCode_POKER_CARD_CODE_SPADE_8   PokerCardCode = 24
	PokerCardCode_POKER_CARD_CODE_SPADE_9   PokerCardCode = 25
	PokerCardCode_POKER_CARD_CODE_SPADE_10  PokerCardCode = 26
	PokerCardCode_POKER_CARD_CODE_SPADE_J   PokerCardCode = 27
	PokerCardCode_POKER_CARD_CODE_SPADE_Q   PokerCardCode = 28
	PokerCardCode_POKER_CARD_CODE_SPADE_K   PokerCardCode = 29
	// 愛心
	PokerCardCode_POKER_CARD_CODE_HEART_ANY PokerCardCode = 32
	PokerCardCode_POKER_CARD_CODE_HEART_A   PokerCardCode = 33
	PokerCardCode_POKER_CARD_CODE_HEART_2   PokerCardCode = 34
	PokerCardCode_POKER_CARD_CODE_HEART_3   PokerCardCode = 35
	PokerCardCode_POKER_CARD_CODE_HEART_4   PokerCardCode = 36
	PokerCardCode_POKER_CARD_CODE_HEART_5   PokerCardCode = 37
	PokerCardCode_POKER_CARD_CODE_HEART_6   PokerCardCode = 38
	PokerCardCode_POKER_CARD_CODE_HEART_7   PokerCardCode = 39
	PokerCardCode_POKER_CARD_CODE_HEART_8   PokerCardCode = 40
	PokerCardCode_POKER_CARD_CODE_HEART_9   PokerCardCode = 41
	PokerCardCode_POKER_CARD_CODE_HEART_10  PokerCardCode = 42
	PokerCardCode_POKER_CARD_CODE_HEART_J   PokerCardCode = 43
	PokerCardCode_POKER_CARD_CODE_HEART_Q   PokerCardCode = 44
	PokerCardCode_POKER_CARD_CODE_HEART_K   PokerCardCode = 45
	// 鑽石
	PokerCardCode_POKER_CARD_CODE_DIAMOND_ANY PokerCardCode = 48
	PokerCardCode_POKER_CARD_CODE_DIAMOND_A   PokerCardCode = 49
	PokerCardCode_POKER_CARD_CODE_DIAMOND_2   PokerCardCode = 50
	PokerCardCode_POKER_CARD_CODE_DIAMOND_3   PokerCardCode = 51
	PokerCardCode_POKER_CARD_CODE_DIAMOND_4   PokerCardCode = 52
	PokerCardCode_POKER_CARD_CODE_DIAMOND_5   PokerCardCode = 53
	PokerCardCode_POKER_CARD_CODE_DIAMOND_6   PokerCardCode = 54
	PokerCardCode_POKER_CARD_CODE_DIAMOND_7   PokerCardCode = 55
	PokerCardCode_POKER_CARD_CODE_DIAMOND_8   PokerCardCode = 56
	PokerCardCode_POKER_CARD_CODE_DIAMOND_9   PokerCardCode = 57
	PokerCardCode_POKER_CARD_CODE_DIAMOND_10  PokerCardCode = 58
	PokerCardCode_POKER_CARD_CODE_DIAMOND_J   PokerCardCode = 59
	PokerCardCode_POKER_CARD_CODE_DIAMOND_Q   PokerCardCode = 60
	PokerCardCode_POKER_CARD_CODE_DIAMOND_K   PokerCardCode = 61
	// 梅花
	PokerCardCode_POKER_CARD_CODE_CLUB_ANY PokerCardCode = 64
	PokerCardCode_POKER_CARD_CODE_CLUB_A   PokerCardCode = 65
	PokerCardCode_POKER_CARD_CODE_CLUB_2   PokerCardCode = 66
	PokerCardCode_POKER_CARD_CODE_CLUB_3   PokerCardCode = 67
	PokerCardCode_POKER_CARD_CODE_CLUB_4   PokerCardCode = 68
	PokerCardCode_POKER_CARD_CODE_CLUB_5   PokerCardCode = 69
	PokerCardCode_POKER_CARD_CODE_CLUB_6   PokerCardCode = 70
	PokerCardCode_POKER_CARD_CODE_CLUB_7   PokerCardCode = 71
	PokerCardCode_POKER_CARD_CODE_CLUB_8   PokerCardCode = 72
	PokerCardCode_POKER_CARD_CODE_CLUB_9   PokerCardCode = 73
	PokerCardCode_POKER_CARD_CODE_CLUB_10  PokerCardCode = 74
	PokerCardCode_POKER_CARD_CODE_CLUB_J   PokerCardCode = 75
	PokerCardCode_POKER_CARD_CODE_CLUB_Q   PokerCardCode = 76
	PokerCardCode_POKER_CARD_CODE_CLUB_K   PokerCardCode = 77
	// 鬼牌
	PokerCardCode_POKER_CARD_CODE_JOKER_COLOR PokerCardCode = 94
	PokerCardCode_POKER_CARD_CODE_JOKER_BLACK PokerCardCode = 95
)

// Enum value maps for PokerCardCode.
var (
	PokerCardCode_name = map[int32]string{
		0:  "POKER_CARD_CODE_UNSPECIFIED",
		1:  "POKER_CARD_CODE_ANY_A",
		2:  "POKER_CARD_CODE_ANY_2",
		3:  "POKER_CARD_CODE_ANY_3",
		4:  "POKER_CARD_CODE_ANY_4",
		5:  "POKER_CARD_CODE_ANY_5",
		6:  "POKER_CARD_CODE_ANY_6",
		7:  "POKER_CARD_CODE_ANY_7",
		8:  "POKER_CARD_CODE_ANY_8",
		9:  "POKER_CARD_CODE_ANY_9",
		10: "POKER_CARD_CODE_ANY_10",
		11: "POKER_CARD_CODE_ANY_J",
		12: "POKER_CARD_CODE_ANY_Q",
		13: "POKER_CARD_CODE_ANY_K",
		16: "POKER_CARD_CODE_SPADE_ANY",
		17: "POKER_CARD_CODE_SPADE_A",
		18: "POKER_CARD_CODE_SPADE_2",
		19: "POKER_CARD_CODE_SPADE_3",
		20: "POKER_CARD_CODE_SPADE_4",
		21: "POKER_CARD_CODE_SPADE_5",
		22: "POKER_CARD_CODE_SPADE_6",
		23: "POKER_CARD_CODE_SPADE_7",
		24: "POKER_CARD_CODE_SPADE_8",
		25: "POKER_CARD_CODE_SPADE_9",
		26: "POKER_CARD_CODE_SPADE_10",
		27: "POKER_CARD_CODE_SPADE_J",
		28: "POKER_CARD_CODE_SPADE_Q",
		29: "POKER_CARD_CODE_SPADE_K",
		32: "POKER_CARD_CODE_HEART_ANY",
		33: "POKER_CARD_CODE_HEART_A",
		34: "POKER_CARD_CODE_HEART_2",
		35: "POKER_CARD_CODE_HEART_3",
		36: "POKER_CARD_CODE_HEART_4",
		37: "POKER_CARD_CODE_HEART_5",
		38: "POKER_CARD_CODE_HEART_6",
		39: "POKER_CARD_CODE_HEART_7",
		40: "POKER_CARD_CODE_HEART_8",
		41: "POKER_CARD_CODE_HEART_9",
		42: "POKER_CARD_CODE_HEART_10",
		43: "POKER_CARD_CODE_HEART_J",
		44: "POKER_CARD_CODE_HEART_Q",
		45: "POKER_CARD_CODE_HEART_K",
		48: "POKER_CARD_CODE_DIAMOND_ANY",
		49: "POKER_CARD_CODE_DIAMOND_A",
		50: "POKER_CARD_CODE_DIAMOND_2",
		51: "POKER_CARD_CODE_DIAMOND_3",
		52: "POKER_CARD_CODE_DIAMOND_4",
		53: "POKER_CARD_CODE_DIAMOND_5",
		54: "POKER_CARD_CODE_DIAMOND_6",
		55: "POKER_CARD_CODE_DIAMOND_7",
		56: "POKER_CARD_CODE_DIAMOND_8",
		57: "POKER_CARD_CODE_DIAMOND_9",
		58: "POKER_CARD_CODE_DIAMOND_10",
		59: "POKER_CARD_CODE_DIAMOND_J",
		60: "POKER_CARD_CODE_DIAMOND_Q",
		61: "POKER_CARD_CODE_DIAMOND_K",
		64: "POKER_CARD_CODE_CLUB_ANY",
		65: "POKER_CARD_CODE_CLUB_A",
		66: "POKER_CARD_CODE_CLUB_2",
		67: "POKER_CARD_CODE_CLUB_3",
		68: "POKER_CARD_CODE_CLUB_4",
		69: "POKER_CARD_CODE_CLUB_5",
		70: "POKER_CARD_CODE_CLUB_6",
		71: "POKER_CARD_CODE_CLUB_7",
		72: "POKER_CARD_CODE_CLUB_8",
		73: "POKER_CARD_CODE_CLUB_9",
		74: "POKER_CARD_CODE_CLUB_10",
		75: "POKER_CARD_CODE_CLUB_J",
		76: "POKER_CARD_CODE_CLUB_Q",
		77: "POKER_CARD_CODE_CLUB_K",
		94: "POKER_CARD_CODE_JOKER_COLOR",
		95: "POKER_CARD_CODE_JOKER_BLACK",
	}
	PokerCardCode_value = map[string]int32{
		"POKER_CARD_CODE_UNSPECIFIED": 0,
		"POKER_CARD_CODE_ANY_A":       1,
		"POKER_CARD_CODE_ANY_2":       2,
		"POKER_CARD_CODE_ANY_3":       3,
		"POKER_CARD_CODE_ANY_4":       4,
		"POKER_CARD_CODE_ANY_5":       5,
		"POKER_CARD_CODE_ANY_6":       6,
		"POKER_CARD_CODE_ANY_7":       7,
		"POKER_CARD_CODE_ANY_8":       8,
		"POKER_CARD_CODE_ANY_9":       9,
		"POKER_CARD_CODE_ANY_10":      10,
		"POKER_CARD_CODE_ANY_J":       11,
		"POKER_CARD_CODE_ANY_Q":       12,
		"POKER_CARD_CODE_ANY_K":       13,
		"POKER_CARD_CODE_SPADE_ANY":   16,
		"POKER_CARD_CODE_SPADE_A":     17,
		"POKER_CARD_CODE_SPADE_2":     18,
		"POKER_CARD_CODE_SPADE_3":     19,
		"POKER_CARD_CODE_SPADE_4":     20,
		"POKER_CARD_CODE_SPADE_5":     21,
		"POKER_CARD_CODE_SPADE_6":     22,
		"POKER_CARD_CODE_SPADE_7":     23,
		"POKER_CARD_CODE_SPADE_8":     24,
		"POKER_CARD_CODE_SPADE_9":     25,
		"POKER_CARD_CODE_SPADE_10":    26,
		"POKER_CARD_CODE_SPADE_J":     27,
		"POKER_CARD_CODE_SPADE_Q":     28,
		"POKER_CARD_CODE_SPADE_K":     29,
		"POKER_CARD_CODE_HEART_ANY":   32,
		"POKER_CARD_CODE_HEART_A":     33,
		"POKER_CARD_CODE_HEART_2":     34,
		"POKER_CARD_CODE_HEART_3":     35,
		"POKER_CARD_CODE_HEART_4":     36,
		"POKER_CARD_CODE_HEART_5":     37,
		"POKER_CARD_CODE_HEART_6":     38,
		"POKER_CARD_CODE_HEART_7":     39,
		"POKER_CARD_CODE_HEART_8":     40,
		"POKER_CARD_CODE_HEART_9":     41,
		"POKER_CARD_CODE_HEART_10":    42,
		"POKER_CARD_CODE_HEART_J":     43,
		"POKER_CARD_CODE_HEART_Q":     44,
		"POKER_CARD_CODE_HEART_K":     45,
		"POKER_CARD_CODE_DIAMOND_ANY": 48,
		"POKER_CARD_CODE_DIAMOND_A":   49,
		"POKER_CARD_CODE_DIAMOND_2":   50,
		"POKER_CARD_CODE_DIAMOND_3":   51,
		"POKER_CARD_CODE_DIAMOND_4":   52,
		"POKER_CARD_CODE_DIAMOND_5":   53,
		"POKER_CARD_CODE_DIAMOND_6":   54,
		"POKER_CARD_CODE_DIAMOND_7":   55,
		"POKER_CARD_CODE_DIAMOND_8":   56,
		"POKER_CARD_CODE_DIAMOND_9":   57,
		"POKER_CARD_CODE_DIAMOND_10":  58,
		"POKER_CARD_CODE_DIAMOND_J":   59,
		"POKER_CARD_CODE_DIAMOND_Q":   60,
		"POKER_CARD_CODE_DIAMOND_K":   61,
		"POKER_CARD_CODE_CLUB_ANY":    64,
		"POKER_CARD_CODE_CLUB_A":      65,
		"POKER_CARD_CODE_CLUB_2":      66,
		"POKER_CARD_CODE_CLUB_3":      67,
		"POKER_CARD_CODE_CLUB_4":      68,
		"POKER_CARD_CODE_CLUB_5":      69,
		"POKER_CARD_CODE_CLUB_6":      70,
		"POKER_CARD_CODE_CLUB_7":      71,
		"POKER_CARD_CODE_CLUB_8":      72,
		"POKER_CARD_CODE_CLUB_9":      73,
		"POKER_CARD_CODE_CLUB_10":     74,
		"POKER_CARD_CODE_CLUB_J":      75,
		"POKER_CARD_CODE_CLUB_Q":      76,
		"POKER_CARD_CODE_CLUB_K":      77,
		"POKER_CARD_CODE_JOKER_COLOR": 94,
		"POKER_CARD_CODE_JOKER_BLACK": 95,
	}
)

func (x PokerCardCode) Enum() *PokerCardCode {
	p := new(PokerCardCode)
	*p = x
	return p
}

func (x PokerCardCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PokerCardCode) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_poker_proto_enumTypes[0].Descriptor()
}

func (PokerCardCode) Type() protoreflect.EnumType {
	return &file_poker_poker_proto_enumTypes[0]
}

func (x PokerCardCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PokerCardCode.Descriptor instead.
func (PokerCardCode) EnumDescriptor() ([]byte, []int) {
	return file_poker_poker_proto_rawDescGZIP(), []int{0}
}

var File_poker_poker_proto protoreflect.FileDescriptor

var file_poker_poker_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2a, 0xc4, 0x10, 0x0a, 0x0d, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x5f, 0x35, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e,
	0x59, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x39, 0x10, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x4e, 0x59, 0x5f, 0x4a, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x51,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x4b, 0x10, 0x0d, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41,
	0x44, 0x45, 0x5f, 0x32, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f,
	0x33, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x34, 0x10, 0x14,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x35, 0x10, 0x15, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x36, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50,
	0x41, 0x44, 0x45, 0x5f, 0x37, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45,
	0x5f, 0x38, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x39, 0x10,
	0x19, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x31, 0x30, 0x10, 0x1a, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x4a, 0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x50, 0x41, 0x44, 0x45, 0x5f, 0x51, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x41,
	0x44, 0x45, 0x5f, 0x4b, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f,
	0x41, 0x4e, 0x59, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x41,
	0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x32, 0x10, 0x22, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x33, 0x10, 0x23, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x34, 0x10, 0x24, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x5f, 0x35, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f,
	0x36, 0x10, 0x26, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x37, 0x10, 0x27,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x38, 0x10, 0x28, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x39, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x5f, 0x31, 0x30, 0x10, 0x2a, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x5f, 0x4a, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x51,
	0x10, 0x2c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x4b, 0x10, 0x2d, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x30,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x41, 0x10, 0x31, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x32, 0x10, 0x32, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x33, 0x10, 0x33, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x34, 0x10, 0x34, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x35, 0x10, 0x35, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x36, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49,
	0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x37, 0x10, 0x37, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41,
	0x4d, 0x4f, 0x4e, 0x44, 0x5f, 0x38, 0x10, 0x38, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x5f, 0x39, 0x10, 0x39, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f,
	0x4e, 0x44, 0x5f, 0x31, 0x30, 0x10, 0x3a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f,
	0x4e, 0x44, 0x5f, 0x4a, 0x10, 0x3b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x5f, 0x51, 0x10, 0x3c, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44,
	0x5f, 0x4b, 0x10, 0x3d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x41, 0x10, 0x41, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x32, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x55, 0x42, 0x5f, 0x33, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x34,
	0x10, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x35, 0x10, 0x45, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x36, 0x10, 0x46, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x55, 0x42, 0x5f, 0x37, 0x10, 0x47, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x38,
	0x10, 0x48, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x39, 0x10, 0x49, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x31, 0x30, 0x10, 0x4a, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4c, 0x55, 0x42, 0x5f, 0x4a, 0x10, 0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f,
	0x51, 0x10, 0x4c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x4b, 0x10, 0x4d, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4a, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x5e,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x5f, 0x42, 0x7d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x0a,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0xa2, 0x02,
	0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0xca, 0x02, 0x05, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0xe2, 0x02, 0x11, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_poker_poker_proto_rawDescOnce sync.Once
	file_poker_poker_proto_rawDescData = file_poker_poker_proto_rawDesc
)

func file_poker_poker_proto_rawDescGZIP() []byte {
	file_poker_poker_proto_rawDescOnce.Do(func() {
		file_poker_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_poker_proto_rawDescData)
	})
	return file_poker_poker_proto_rawDescData
}

var file_poker_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_poker_poker_proto_goTypes = []interface{}{
	(PokerCardCode)(0), // 0: poker.PokerCardCode
}
var file_poker_poker_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_poker_poker_proto_init() }
func file_poker_poker_proto_init() {
	if File_poker_poker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_poker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_poker_poker_proto_goTypes,
		DependencyIndexes: file_poker_poker_proto_depIdxs,
		EnumInfos:         file_poker_poker_proto_enumTypes,
	}.Build()
	File_poker_poker_proto = out.File
	file_poker_poker_proto_rawDesc = nil
	file_poker_poker_proto_goTypes = nil
	file_poker_poker_proto_depIdxs = nil
}
