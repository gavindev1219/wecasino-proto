// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: baccarat/record.proto

package baccarat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 使用卡牌種類
type CardTypeCode int32

const (
	// 未指定
	CardTypeCode_CARD_TYPE_CODE_UNSPECIFIED CardTypeCode = 0
	// 撲克牌
	CardTypeCode_CARD_TYPE_CODE_POKER CardTypeCode = 1
	// 場控牌
	CardTypeCode_CARD_TYPE_CODE_CONTROL CardTypeCode = 9
)

// Enum value maps for CardTypeCode.
var (
	CardTypeCode_name = map[int32]string{
		0: "CARD_TYPE_CODE_UNSPECIFIED",
		1: "CARD_TYPE_CODE_POKER",
		9: "CARD_TYPE_CODE_CONTROL",
	}
	CardTypeCode_value = map[string]int32{
		"CARD_TYPE_CODE_UNSPECIFIED": 0,
		"CARD_TYPE_CODE_POKER":       1,
		"CARD_TYPE_CODE_CONTROL":     9,
	}
)

func (x CardTypeCode) Enum() *CardTypeCode {
	p := new(CardTypeCode)
	*p = x
	return p
}

func (x CardTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[0].Descriptor()
}

func (CardTypeCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[0]
}

func (x CardTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardTypeCode.Descriptor instead.
func (CardTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{0}
}

type ResourceTypeCode int32

const (
	// 未指定
	ResourceTypeCode_RESOURCE_TYPE_CODE_UNSPECIFIED ResourceTypeCode = 0
	// 手牌
	ResourceTypeCode_RESOURCE_TYPE_CODE_HAND_CARD ResourceTypeCode = 1
)

// Enum value maps for ResourceTypeCode.
var (
	ResourceTypeCode_name = map[int32]string{
		0: "RESOURCE_TYPE_CODE_UNSPECIFIED",
		1: "RESOURCE_TYPE_CODE_HAND_CARD",
	}
	ResourceTypeCode_value = map[string]int32{
		"RESOURCE_TYPE_CODE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_CODE_HAND_CARD":   1,
	}
)

func (x ResourceTypeCode) Enum() *ResourceTypeCode {
	p := new(ResourceTypeCode)
	*p = x
	return p
}

func (x ResourceTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[1].Descriptor()
}

func (ResourceTypeCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[1]
}

func (x ResourceTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeCode.Descriptor instead.
func (ResourceTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{1}
}

// 動作代碼
type StepActionCode int32

const (
	// 未指定
	StepActionCode_STEP_ACTION_CODE_UNSPECIFIED StepActionCode = 0
	// 派發閒家例牌
	StepActionCode_STEP_ACTION_CODE_DEAL_PLAYER_NORMAL StepActionCode = 1
	// 派發莊家例牌
	StepActionCode_STEP_ACTION_CODE_DEAL_BANKER_NORMAL StepActionCode = 2
	// 開閒家例牌
	StepActionCode_STEP_ACTION_CODE_SHOW_PLAYER_NORMAL StepActionCode = 3
	// 開莊家例牌
	StepActionCode_STEP_ACTION_CODE_SHOW_BANKER_NORMAL StepActionCode = 4
	// 補閒家
	StepActionCode_STEP_ACTION_CODE_DEAL_PLAYER_UNNORMAL StepActionCode = 5
	// 補莊家
	StepActionCode_STEP_ACTION_CODE_DEAL_BANKER_UNNORMAL StepActionCode = 6
	// PITBOSS
	StepActionCode_STEP_ACTION_CODE_PITBOSS_MODIFY StepActionCode = 9
)

// Enum value maps for StepActionCode.
var (
	StepActionCode_name = map[int32]string{
		0: "STEP_ACTION_CODE_UNSPECIFIED",
		1: "STEP_ACTION_CODE_DEAL_PLAYER_NORMAL",
		2: "STEP_ACTION_CODE_DEAL_BANKER_NORMAL",
		3: "STEP_ACTION_CODE_SHOW_PLAYER_NORMAL",
		4: "STEP_ACTION_CODE_SHOW_BANKER_NORMAL",
		5: "STEP_ACTION_CODE_DEAL_PLAYER_UNNORMAL",
		6: "STEP_ACTION_CODE_DEAL_BANKER_UNNORMAL",
		9: "STEP_ACTION_CODE_PITBOSS_MODIFY",
	}
	StepActionCode_value = map[string]int32{
		"STEP_ACTION_CODE_UNSPECIFIED":          0,
		"STEP_ACTION_CODE_DEAL_PLAYER_NORMAL":   1,
		"STEP_ACTION_CODE_DEAL_BANKER_NORMAL":   2,
		"STEP_ACTION_CODE_SHOW_PLAYER_NORMAL":   3,
		"STEP_ACTION_CODE_SHOW_BANKER_NORMAL":   4,
		"STEP_ACTION_CODE_DEAL_PLAYER_UNNORMAL": 5,
		"STEP_ACTION_CODE_DEAL_BANKER_UNNORMAL": 6,
		"STEP_ACTION_CODE_PITBOSS_MODIFY":       9,
	}
)

func (x StepActionCode) Enum() *StepActionCode {
	p := new(StepActionCode)
	*p = x
	return p
}

func (x StepActionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepActionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[2].Descriptor()
}

func (StepActionCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[2]
}

func (x StepActionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepActionCode.Descriptor instead.
func (StepActionCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{2}
}

// 步驟代碼
type StepCode int32

const (
	// 未指定
	StepCode_STEP_CODE_UNSPECIFIED StepCode = 0
	// 派發例牌
	StepCode_STEP_CODE_DEAL_NORMAL StepCode = 1
	// 開例牌
	StepCode_STEP_CODE_SHOW_NORMAL StepCode = 2
	// 補閒家
	StepCode_STEP_CODE_DEAL_PLAYER_UNNORMAL StepCode = 3
	// 補莊家
	StepCode_STEP_CODE_DEAL_BANKER_UNNORMAL StepCode = 4
	// PITBOSS
	StepCode_STEP_CODE_PITBOSS_MODIFY StepCode = 9
)

// Enum value maps for StepCode.
var (
	StepCode_name = map[int32]string{
		0: "STEP_CODE_UNSPECIFIED",
		1: "STEP_CODE_DEAL_NORMAL",
		2: "STEP_CODE_SHOW_NORMAL",
		3: "STEP_CODE_DEAL_PLAYER_UNNORMAL",
		4: "STEP_CODE_DEAL_BANKER_UNNORMAL",
		9: "STEP_CODE_PITBOSS_MODIFY",
	}
	StepCode_value = map[string]int32{
		"STEP_CODE_UNSPECIFIED":          0,
		"STEP_CODE_DEAL_NORMAL":          1,
		"STEP_CODE_SHOW_NORMAL":          2,
		"STEP_CODE_DEAL_PLAYER_UNNORMAL": 3,
		"STEP_CODE_DEAL_BANKER_UNNORMAL": 4,
		"STEP_CODE_PITBOSS_MODIFY":       9,
	}
)

func (x StepCode) Enum() *StepCode {
	p := new(StepCode)
	*p = x
	return p
}

func (x StepCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[3].Descriptor()
}

func (StepCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[3]
}

func (x StepCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepCode.Descriptor instead.
func (StepCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{3}
}

// 座位功能代碼
type SeatCode int32

const (
	// 未指定
	SeatCode_SEAT_CODE_UNSPECIFIED SeatCode = 0
	// 莊家
	SeatCode_SEAT_CODE_SEAT_BANKER SeatCode = 1
	// 閒家
	SeatCode_SEAT_CODE_SEAT_PLAYER SeatCode = 2
	// Dealer
	SeatCode_SEAT_CODE_SEAT_DEALER SeatCode = 3
	// Pitboss
	SeatCode_SEAT_CODE_SEAT_PITBOSS SeatCode = 9
)

// Enum value maps for SeatCode.
var (
	SeatCode_name = map[int32]string{
		0: "SEAT_CODE_UNSPECIFIED",
		1: "SEAT_CODE_SEAT_BANKER",
		2: "SEAT_CODE_SEAT_PLAYER",
		3: "SEAT_CODE_SEAT_DEALER",
		9: "SEAT_CODE_SEAT_PITBOSS",
	}
	SeatCode_value = map[string]int32{
		"SEAT_CODE_UNSPECIFIED":  0,
		"SEAT_CODE_SEAT_BANKER":  1,
		"SEAT_CODE_SEAT_PLAYER":  2,
		"SEAT_CODE_SEAT_DEALER":  3,
		"SEAT_CODE_SEAT_PITBOSS": 9,
	}
)

func (x SeatCode) Enum() *SeatCode {
	p := new(SeatCode)
	*p = x
	return p
}

func (x SeatCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[4].Descriptor()
}

func (SeatCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[4]
}

func (x SeatCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatCode.Descriptor instead.
func (SeatCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{4}
}

// 結果紀錄類型代碼
type ResultRecordTypeCode int32

const (
	// 未指定
	ResultRecordTypeCode_RESULT_RECORD_TYPE_CODE_UNSPECIFIED ResultRecordTypeCode = 0
	// 遊戲局結束
	ResultRecordTypeCode_RESULT_RECORD_TYPE_CODE_ROUND_FINISH ResultRecordTypeCode = 1
	// Pitboss 修正
	ResultRecordTypeCode_RESULT_RECORD_TYPE_CODE_PITBOSS_JUDGEMENT ResultRecordTypeCode = 2
)

// Enum value maps for ResultRecordTypeCode.
var (
	ResultRecordTypeCode_name = map[int32]string{
		0: "RESULT_RECORD_TYPE_CODE_UNSPECIFIED",
		1: "RESULT_RECORD_TYPE_CODE_ROUND_FINISH",
		2: "RESULT_RECORD_TYPE_CODE_PITBOSS_JUDGEMENT",
	}
	ResultRecordTypeCode_value = map[string]int32{
		"RESULT_RECORD_TYPE_CODE_UNSPECIFIED":       0,
		"RESULT_RECORD_TYPE_CODE_ROUND_FINISH":      1,
		"RESULT_RECORD_TYPE_CODE_PITBOSS_JUDGEMENT": 2,
	}
)

func (x ResultRecordTypeCode) Enum() *ResultRecordTypeCode {
	p := new(ResultRecordTypeCode)
	*p = x
	return p
}

func (x ResultRecordTypeCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultRecordTypeCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[5].Descriptor()
}

func (ResultRecordTypeCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[5]
}

func (x ResultRecordTypeCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultRecordTypeCode.Descriptor instead.
func (ResultRecordTypeCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{5}
}

type CancelReasonCode int32

const (
	// 未指定，沒有取消
	CancelReasonCode_CANCEL_REASON_CODE_UNSPECIFIED CancelReasonCode = 0
	// 取消說明原因
	CancelReasonCode_CANCEL_REASON_CODE_NO_REASON CancelReasonCode = 1
)

// Enum value maps for CancelReasonCode.
var (
	CancelReasonCode_name = map[int32]string{
		0: "CANCEL_REASON_CODE_UNSPECIFIED",
		1: "CANCEL_REASON_CODE_NO_REASON",
	}
	CancelReasonCode_value = map[string]int32{
		"CANCEL_REASON_CODE_UNSPECIFIED": 0,
		"CANCEL_REASON_CODE_NO_REASON":   1,
	}
)

func (x CancelReasonCode) Enum() *CancelReasonCode {
	p := new(CancelReasonCode)
	*p = x
	return p
}

func (x CancelReasonCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReasonCode) Descriptor() protoreflect.EnumDescriptor {
	return file_baccarat_record_proto_enumTypes[6].Descriptor()
}

func (CancelReasonCode) Type() protoreflect.EnumType {
	return &file_baccarat_record_proto_enumTypes[6]
}

func (x CancelReasonCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReasonCode.Descriptor instead.
func (CancelReasonCode) EnumDescriptor() ([]byte, []int) {
	return file_baccarat_record_proto_rawDescGZIP(), []int{6}
}

var File_baccarat_record_proto protoreflect.FileDescriptor

var file_baccarat_record_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61,
	0x74, 0x2a, 0x64, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x09, 0x2a, 0x58, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x2a, 0xd1, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x10, 0x09, 0x2a, 0xc1, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x09, 0x2a, 0x92, 0x01, 0x0a, 0x08, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x09, 0x2a, 0x98,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4a, 0x55,
	0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x10, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x42, 0x90, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x63,
	0x61, 0x72, 0x61, 0x74, 0x42, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6b, 0x79, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x6b, 0x79,
	0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02,
	0x08, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0xca, 0x02, 0x08, 0x42, 0x61, 0x63, 0x63,
	0x61, 0x72, 0x61, 0x74, 0xe2, 0x02, 0x14, 0x42, 0x61, 0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x42, 0x61,
	0x63, 0x63, 0x61, 0x72, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baccarat_record_proto_rawDescOnce sync.Once
	file_baccarat_record_proto_rawDescData = file_baccarat_record_proto_rawDesc
)

func file_baccarat_record_proto_rawDescGZIP() []byte {
	file_baccarat_record_proto_rawDescOnce.Do(func() {
		file_baccarat_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_baccarat_record_proto_rawDescData)
	})
	return file_baccarat_record_proto_rawDescData
}

var file_baccarat_record_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_baccarat_record_proto_goTypes = []interface{}{
	(CardTypeCode)(0),         // 0: baccarat.CardTypeCode
	(ResourceTypeCode)(0),     // 1: baccarat.ResourceTypeCode
	(StepActionCode)(0),       // 2: baccarat.StepActionCode
	(StepCode)(0),             // 3: baccarat.StepCode
	(SeatCode)(0),             // 4: baccarat.SeatCode
	(ResultRecordTypeCode)(0), // 5: baccarat.ResultRecordTypeCode
	(CancelReasonCode)(0),     // 6: baccarat.CancelReasonCode
}
var file_baccarat_record_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_baccarat_record_proto_init() }
func file_baccarat_record_proto_init() {
	if File_baccarat_record_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baccarat_record_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baccarat_record_proto_goTypes,
		DependencyIndexes: file_baccarat_record_proto_depIdxs,
		EnumInfos:         file_baccarat_record_proto_enumTypes,
	}.Build()
	File_baccarat_record_proto = out.File
	file_baccarat_record_proto_rawDesc = nil
	file_baccarat_record_proto_goTypes = nil
	file_baccarat_record_proto_depIdxs = nil
}
